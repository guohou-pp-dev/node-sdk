[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Hyperwallet.js",
    "content": "import objectAssign from \"object-assign\";\nimport ApiClient from \"./utils/ApiClient\";\n\n/**\n * The Hyperwallet SDK Client\n */\nexport default class Hyperwallet {\n    /**\n     * Create a instance of the SDK Client\n     *\n     * @param {Object} config - The API config\n     * @param {string} config.username - The API username\n     * @param {string} config.password - The API password\n     * @param {string} [config.programToken] - The program token that is used for some API calls\n     * @param {Object} [config.encryptionData] - The JSON object of encryption data\n     * @param {string} [config.server=https://api.sandbox.hyperwallet.com] - The API server to connect to\n     */\n    constructor({ username, password, programToken, encryptionData, server = \"https://api.sandbox.hyperwallet.com\" }) {\n        if (!username || !password) {\n            throw new Error(\"You need to specify your API username and password!\");\n        }\n\n        /**\n         * The instance of the ApiClient\n         *\n         * @type {ApiClient}\n         * @protected\n         */\n        this.client = new ApiClient(username, password, server, encryptionData);\n\n        /**\n         * The program token that is used for some API calls\n         *\n         * @type {string}\n         * @protected\n         */\n        this.programToken = programToken;\n    }\n\n    //--------------------------------------\n    // Users\n    //--------------------------------------\n\n    /**\n     * Create a user\n     *\n     * @param {Object} data - The user data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createUser(data, callback) {\n        this.addProgramToken(data);\n        this.client.doPost(\"users\", data, {}, callback);\n    }\n\n    /**\n     * Load a user\n     *\n     * @param {string} userToken - The user token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a user\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The user data that should be updated\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    updateUser(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.addProgramToken(data);\n        this.client.doPut(`users/${encodeURIComponent(userToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all users\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listUsers(options, callback) {\n        this.client.doGet(\"users\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Get user status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} statusTransitionToken - The user status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getUserStatusTransition(userToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all user status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listUserStatusTransitions(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Prepaid Cards\n    //--------------------------------------\n\n    /**\n     * Create a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The prepaid card data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPrepaidCard(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards`, data, {}, callback);\n    }\n\n    /**\n     * Get a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    getPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} data - The prepaid card data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    updatePrepaidCard(userToken, prepaidCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all prepaid cards\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPrepaidCards(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Suspend a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    suspendPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"SUSPENDED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Unsuspend a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    unsuspendPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"UNSUSPENDED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Mark a prepaid card as lost or stolen\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    lostOrStolenPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"LOST_OR_STOLEN\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Deactivate a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    deactivatePrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Lock a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    lockPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"LOCKED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Unlock a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    unlockPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"UNLOCKED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a prepaid card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} data - The prepaid card status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    createPrepaidCardStatusTransition(userToken, prepaidCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a prepaid card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {string} statusTransitionToken - The prepaid card status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, prepaidCardToken or statusTransitionToken is not provided\n     */\n    getPrepaidCardStatusTransition(userToken, prepaidCardToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all prepaid card status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listPrepaidCardStatusTransitions(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Bank Cards\n    //--------------------------------------\n\n    /**\n     * Create a Bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The bank card data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBankCard(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    getBankCard(userToken, bankCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} data - The bank card data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    updateBankCard(userToken, bankCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all bank cards\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBankCards(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    deactivateBankCard(userToken, bankCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a bank card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} data - The bank card status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    createBankCardStatusTransition(userToken, bankCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {string} statusTransitionToken - The bank card status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, bankCardToken or statusTransitionToken is not provided\n     */\n    getBankCardStatusTransition(userToken, bankCardToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all bank card status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    listBankCardStatusTransitions(userToken, bankCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Authentication Token\n    //--------------------------------------\n\n    /**\n     * Get authentication token\n     *\n     * @param {string} userToken - The user token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getAuthenticationToken(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/authentication-token`, {}, {}, callback);\n    }\n\n    //--------------------------------------\n    // Paper Checks\n    //--------------------------------------\n\n    /**\n     * Create a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The paper check data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPaperCheck(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks`, data, {}, callback);\n    }\n\n    /**\n     * Get a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    getPaperCheck(userToken, paperCheckToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} data - The paper check data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    updatePaperCheck(userToken, paperCheckToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all paper checks\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPaperChecks(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    deactivatePaperCheck(userToken, paperCheckToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a paper check status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} data - The paper check status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    createPaperCheckStatusTransition(userToken, paperCheckToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a paper check status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {string} statusTransitionToken - The paper check status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, paperCheckToken or statusTransitionToken is not provided\n     */\n    getPaperCheckStatusTransition(userToken, paperCheckToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all paper check status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    listPaperCheckStatusTransitions(userToken, paperCheckToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Transfers\n    //--------------------------------------\n\n    /**\n     * Create a transfer\n     *\n     * @param {Object} data - The transfer data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createTransfer(data, callback) {\n        if (!data.sourceToken) {\n            throw new Error(\"sourceToken is required\");\n        }\n        if (!data.destinationToken) {\n            throw new Error(\"destinationToken is required\");\n        }\n        if (!data.clientTransferId) {\n            throw new Error(\"clientTransferId is required\");\n        }\n        this.client.doPost(\"transfers\", data, {}, callback);\n    }\n\n    /**\n     * Get a transfer\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if transferToken is not provided\n     */\n    getTransfer(transferToken, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}`, {}, callback);\n    }\n\n    /**\n     * List all transfers\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listTransfers(options, callback) {\n        this.client.doGet(\"transfers\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a transfer status transition\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {Object} data - The transfer status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if transferToken is not provided\n     */\n    createTransferStatusTransition(transferToken, data, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n\n        this.client.doPost(`transfers/${encodeURIComponent(transferToken)}/status-transitions`, data, {}, callback);\n    }\n\n    //--------------------------------------\n    // PayPal Accounts\n    //--------------------------------------\n\n    /**\n     * Create a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The PayPal account data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPayPalAccount(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!data.transferMethodCountry) {\n            throw new Error(\"transferMethodCountry is required\");\n        }\n        if (!data.transferMethodCurrency) {\n            throw new Error(\"transferMethodCurrency is required\");\n        }\n        if (!data.email) {\n            throw new Error(\"email is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts`, data, {}, callback);\n    }\n\n    /**\n     * Get a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - The PayPal account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    getPayPalAccount(userToken, payPalAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}`, {}, callback);\n    }\n\n    /**\n     * List all PayPal accounts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPayPalAccounts(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create PayPal account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - PayPal account token\n     * @param {Object} data - PayPal account status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    createPayPalAccountStatusTransition(userToken, payPalAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions`, data, {}, callback);\n    }\n\n    //--------------------------------------\n    // Bank Accounts\n    //--------------------------------------\n\n    /**\n     * Create a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The bank account data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBankAccount(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    getBankAccount(userToken, bankAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} data - The bank account data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    updateBankAccount(userToken, bankAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all bank accounts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBankAccounts(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    deactivateBankAccount(userToken, bankAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE-ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a bank account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} data - The bank account status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    createBankAccountStatusTransition(userToken, bankAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get bank account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {string} statusTransitionToken - The bank account status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    getBankAccountStatusTransition(userToken, bankAccountToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all bank account status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    listBankAccountStatusTransitions(userToken, bankAccountToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Balances\n    //--------------------------------------\n\n    /**\n     * List balances for a user\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBalancesForUser(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List balances for a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listBalancesForPrepaidCard(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List balances for a program accounts\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken or accountToken is not provided\n     */\n    listBalancesForAccount(programToken, accountToken, options, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Payments\n    //--------------------------------------\n\n    /**\n     * Create a payment\n     *\n     * @param {Object} data - The payment data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createPayment(data, callback) {\n        this.addProgramToken(data);\n        this.client.doPost(\"payments\", data, {}, callback);\n    }\n\n    /**\n     * Get a payment\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    getPayment(paymentToken, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}`, {}, callback);\n    }\n\n    /**\n     * List all payments\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listPayments(options, callback) {\n        this.client.doGet(\"payments\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a payment status transition\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {Object} data - The payment status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    createPaymentStatusTransition(paymentToken, data, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n\n        this.client.doPost(`payments/${encodeURIComponent(paymentToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get payment status transition\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {string} statusTransitionToken - The payment status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    getPaymentStatusTransition(paymentToken, statusTransitionToken, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all payment status transitions\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    listPaymentStatusTransitions(paymentToken, options, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Programs\n    //--------------------------------------\n\n    /**\n     * Get a program\n     *\n     * @param {string} programToken - The program token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken is not provided\n     */\n    getProgram(programToken, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}`, {}, callback);\n    }\n\n    //--------------------------------------\n    // Program Accounts\n    //--------------------------------------\n\n    /**\n     * Get a program account\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken is not provided\n     */\n    getProgramAccount(programToken, accountToken, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}`, {}, callback);\n    }\n\n\n    //--------------------------------------\n    // Transfer Method Configurations\n    //--------------------------------------\n\n    /**\n     * Get a transfer method configuration\n     *\n     * @param {string} userToken - The user token\n     * @param {string} country - The transfer method country\n     * @param {string} currency - The transfer method currency\n     * @param {string} type - The transfer method type\n     * @param {string} profileType - The profile type\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken, country, currency, type or profileType is not provided\n     */\n    getTransferMethodConfiguration(userToken, country, currency, type, profileType, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!country) {\n            throw new Error(\"country is required\");\n        }\n        if (!currency) {\n            throw new Error(\"currency is required\");\n        }\n        if (!type) {\n            throw new Error(\"type is required\");\n        }\n        if (!profileType) {\n            throw new Error(\"profileType is required\");\n        }\n        this.client.doGet(\"transfer-method-configurations\", {\n            userToken,\n            country,\n            currency,\n            type,\n            profileType,\n        }, callback);\n    }\n\n    /**\n     * List all transfer method configurations\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listTransferMethodConfigurations(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const params = options ? objectAssign({}, options, { userToken }) : { userToken };\n        this.client.doGet(\"transfer-method-configurations\", params, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a transfer method\n     *\n     * @param {string} userToken The user token\n     * @param {string} jsonCacheToken The json cache token supplied by the widget\n     * @param {Object} data - Transfer method data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     * @throws Will throw an error if jsonCacheToken is not provided\n     */\n    createTransferMethod(userToken, jsonCacheToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n\n        if (!jsonCacheToken) {\n            throw new Error(\"jsonCacheToken is required\");\n        }\n\n        const headers = { \"Json-Cache-Token\": jsonCacheToken };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/transfer-methods`, data, headers, callback);\n    }\n\n    //--------------------------------------\n    // Receipts\n    //--------------------------------------\n\n    /**\n     * List all program account receipts\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken or accountToken is not provided\n     */\n    listReceiptsForProgramAccount(programToken, accountToken, options, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List all user receipts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listReceiptsForUser(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List all prepaid card receipts\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listReceiptsForPrepaidCard(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Webhooks: Notifications\n    //-------------------------------------\n\n    /**\n     * List webhook notifications\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listWebhookNotifications(options, callback) {\n        this.client.doGet(\"webhook-notifications\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Get a single webhook notification\n     *\n     * @param {string} webhookToken - Webhook token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if webhookToken is not provided\n     */\n    getWebhookNotification(webhookToken, callback) {\n        if (!webhookToken) {\n            throw new Error(\"webhookToken is required\");\n        }\n        this.client.doGet(`webhook-notifications/${encodeURIComponent(webhookToken)}`, {}, callback);\n    }\n\n    //--------------------------------------\n    // Internal utils\n    //--------------------------------------\n\n    /**\n     * Add program token to data object if not already set\n     *\n     * @param {Object} data - The data object\n     * @returns {Object} - The adjusted object\n     *\n     * @private\n     */\n    addProgramToken(data) {\n        if (!data || !this.programToken) {\n            return data;\n        }\n        if (data.programToken) {\n            return data;\n        }\n\n        data.programToken = this.programToken; // eslint-disable-line no-param-reassign\n        return data;\n    }\n\n    /**\n     * Handle 204 response for list calls\n     *\n     * @param {api-callback} callback - The api callback\n     * @returns {api-callback} - A wrapper api callback\n     *\n     * @private\n     */\n    static handle204Response(callback) {\n        return (err, data, res) => {\n            if (!err && res.status === 204) {\n                callback(err, {\n                    count: 0,\n                    data: [],\n                }, res);\n                return;\n            }\n            callback(err, data, res);\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/src/Hyperwallet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Hyperwallet",
    "memberof": "src/Hyperwallet.js",
    "static": true,
    "longname": "src/Hyperwallet.js~Hyperwallet",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/Hyperwallet.js",
    "importStyle": "Hyperwallet",
    "description": "The Hyperwallet SDK Client",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#constructor",
    "access": "public",
    "description": "Create a instance of the SDK Client",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The API config"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.username",
        "description": "The API username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.password",
        "description": "The API password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "config.programToken",
        "description": "The program token that is used for some API calls"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config.encryptionData",
        "description": "The JSON object of encryption data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "https://api.sandbox.hyperwallet.com",
        "defaultRaw": "https://api.sandbox.hyperwallet.com",
        "name": "config.server",
        "description": "The API server to connect to"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "client",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#client",
    "access": "protected",
    "description": "The instance of the ApiClient",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "ApiClient"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "programToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#programToken",
    "access": "protected",
    "description": "The program token that is used for some API calls",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "createUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createUser",
    "access": "public",
    "description": "Create a user",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The user data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getUser",
    "access": "public",
    "description": "Load a user",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "updateUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateUser",
    "access": "public",
    "description": "Update a user",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The user data that should be updated"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "listUsers",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listUsers",
    "access": "public",
    "description": "List all users",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "getUserStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getUserStatusTransition",
    "access": "public",
    "description": "Get user status transition",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The user status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "listUserStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listUserStatusTransitions",
    "access": "public",
    "description": "List all user status transitions",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "createPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPrepaidCard",
    "access": "public",
    "description": "Create a prepaid card",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPrepaidCard",
    "access": "public",
    "description": "Get a prepaid card",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "updatePrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updatePrepaidCard",
    "access": "public",
    "description": "Update a prepaid card",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "listPrepaidCards",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPrepaidCards",
    "access": "public",
    "description": "List all prepaid cards",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "suspendPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#suspendPrepaidCard",
    "access": "public",
    "description": "Suspend a prepaid card",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "unsuspendPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#unsuspendPrepaidCard",
    "access": "public",
    "description": "Unsuspend a prepaid card",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "lostOrStolenPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#lostOrStolenPrepaidCard",
    "access": "public",
    "description": "Mark a prepaid card as lost or stolen",
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "deactivatePrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivatePrepaidCard",
    "access": "public",
    "description": "Deactivate a prepaid card",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "lockPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#lockPrepaidCard",
    "access": "public",
    "description": "Lock a prepaid card",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "unlockPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#unlockPrepaidCard",
    "access": "public",
    "description": "Unlock a prepaid card",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "createPrepaidCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPrepaidCardStatusTransition",
    "access": "public",
    "description": "Create a prepaid card status transition",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getPrepaidCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPrepaidCardStatusTransition",
    "access": "public",
    "description": "Get a prepaid card status transition",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The prepaid card status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, prepaidCardToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "listPrepaidCardStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPrepaidCardStatusTransitions",
    "access": "public",
    "description": "List all prepaid card status transitions",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "createBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankCard",
    "access": "public",
    "description": "Create a Bank card",
    "lineNumber": 415,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankCard",
    "access": "public",
    "description": "Get a bank card",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "updateBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateBankCard",
    "access": "public",
    "description": "Update a bank card",
    "lineNumber": 451,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "listBankCards",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankCards",
    "access": "public",
    "description": "List all bank cards",
    "lineNumber": 469,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "deactivateBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateBankCard",
    "access": "public",
    "description": "Deactivate a bank card",
    "lineNumber": 484,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "createBankCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankCardStatusTransition",
    "access": "public",
    "description": "Create a bank card status transition",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getBankCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankCardStatusTransition",
    "access": "public",
    "description": "Get a bank card status transition",
    "lineNumber": 527,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The bank card status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, bankCardToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "listBankCardStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankCardStatusTransitions",
    "access": "public",
    "description": "List all bank card status transitions",
    "lineNumber": 550,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getAuthenticationToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getAuthenticationToken",
    "access": "public",
    "description": "Get authentication token",
    "lineNumber": 572,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "createPaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaperCheck",
    "access": "public",
    "description": "Create a paper check",
    "lineNumber": 592,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getPaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaperCheck",
    "access": "public",
    "description": "Get a paper check",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "updatePaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updatePaperCheck",
    "access": "public",
    "description": "Update a paper check",
    "lineNumber": 628,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "listPaperChecks",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaperChecks",
    "access": "public",
    "description": "List all paper checks",
    "lineNumber": 646,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "deactivatePaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivatePaperCheck",
    "access": "public",
    "description": "Deactivate a paper check",
    "lineNumber": 661,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "createPaperCheckStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaperCheckStatusTransition",
    "access": "public",
    "description": "Create a paper check status transition",
    "lineNumber": 684,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getPaperCheckStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaperCheckStatusTransition",
    "access": "public",
    "description": "Get a paper check status transition",
    "lineNumber": 704,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The paper check status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, paperCheckToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "listPaperCheckStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaperCheckStatusTransitions",
    "access": "public",
    "description": "List all paper check status transitions",
    "lineNumber": 727,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "createTransfer",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransfer",
    "access": "public",
    "description": "Create a transfer",
    "lineNumber": 747,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The transfer data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "getTransfer",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransfer",
    "access": "public",
    "description": "Get a transfer",
    "lineNumber": 768,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "listTransfers",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransfers",
    "access": "public",
    "description": "List all transfers",
    "lineNumber": 781,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "createTransferStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransferStatusTransition",
    "access": "public",
    "description": "Create a transfer status transition",
    "lineNumber": 793,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The transfer status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "createPayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayPalAccount",
    "access": "public",
    "description": "Create a PayPal account",
    "lineNumber": 814,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The PayPal account data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getPayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPayPalAccount",
    "access": "public",
    "description": "Get a PayPal account",
    "lineNumber": 839,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "The PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "listPayPalAccounts",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPayPalAccounts",
    "access": "public",
    "description": "List all PayPal accounts",
    "lineNumber": 857,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "createPayPalAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayPalAccountStatusTransition",
    "access": "public",
    "description": "Create PayPal account status transition",
    "lineNumber": 873,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "PayPal account status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "createBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankAccount",
    "access": "public",
    "description": "Create a bank account",
    "lineNumber": 897,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankAccount",
    "access": "public",
    "description": "Get a bank account",
    "lineNumber": 913,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "updateBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateBankAccount",
    "access": "public",
    "description": "Update a bank account",
    "lineNumber": 933,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "listBankAccounts",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankAccounts",
    "access": "public",
    "description": "List all bank accounts",
    "lineNumber": 951,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "deactivateBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateBankAccount",
    "access": "public",
    "description": "Deactivate a bank account",
    "lineNumber": 967,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "createBankAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankAccountStatusTransition",
    "access": "public",
    "description": "Create a bank account status transition",
    "lineNumber": 990,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "getBankAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankAccountStatusTransition",
    "access": "public",
    "description": "Get bank account status transition",
    "lineNumber": 1012,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The bank account status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "listBankAccountStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankAccountStatusTransitions",
    "access": "public",
    "description": "List all bank account status transitions",
    "lineNumber": 1037,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "listBalancesForUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForUser",
    "access": "public",
    "description": "List balances for a user",
    "lineNumber": 1060,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "listBalancesForPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForPrepaidCard",
    "access": "public",
    "description": "List balances for a prepaid card",
    "lineNumber": 1077,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "listBalancesForAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForAccount",
    "access": "public",
    "description": "List balances for a program accounts",
    "lineNumber": 1097,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken or accountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "createPayment",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayment",
    "access": "public",
    "description": "Create a payment",
    "lineNumber": 1117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The payment data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getPayment",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPayment",
    "access": "public",
    "description": "Get a payment",
    "lineNumber": 1130,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "listPayments",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPayments",
    "access": "public",
    "description": "List all payments",
    "lineNumber": 1143,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "createPaymentStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaymentStatusTransition",
    "access": "public",
    "description": "Create a payment status transition",
    "lineNumber": 1155,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The payment status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "getPaymentStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaymentStatusTransition",
    "access": "public",
    "description": "Get payment status transition",
    "lineNumber": 1172,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The payment status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "listPaymentStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaymentStatusTransitions",
    "access": "public",
    "description": "List all payment status transitions",
    "lineNumber": 1193,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getProgram",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getProgram",
    "access": "public",
    "description": "Get a program",
    "lineNumber": 1212,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getProgramAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getProgramAccount",
    "access": "public",
    "description": "Get a program account",
    "lineNumber": 1232,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getTransferMethodConfiguration",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransferMethodConfiguration",
    "access": "public",
    "description": "Get a transfer method configuration",
    "lineNumber": 1259,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "The transfer method country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "The transfer method currency"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The transfer method type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "profileType",
        "description": "The profile type"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, country, currency, type or profileType is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "listTransferMethodConfigurations",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransferMethodConfigurations",
    "access": "public",
    "description": "List all transfer method configurations",
    "lineNumber": 1293,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "createTransferMethod",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransferMethod",
    "access": "public",
    "description": "Create a transfer method",
    "lineNumber": 1312,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonCacheToken",
        "description": "The json cache token supplied by the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Transfer method data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      },
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if jsonCacheToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "listReceiptsForProgramAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForProgramAccount",
    "access": "public",
    "description": "List all program account receipts",
    "lineNumber": 1339,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken or accountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "listReceiptsForUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForUser",
    "access": "public",
    "description": "List all user receipts",
    "lineNumber": 1358,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "listReceiptsForPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForPrepaidCard",
    "access": "public",
    "description": "List all prepaid card receipts",
    "lineNumber": 1375,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "listWebhookNotifications",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listWebhookNotifications",
    "access": "public",
    "description": "List webhook notifications",
    "lineNumber": 1395,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getWebhookNotification",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getWebhookNotification",
    "access": "public",
    "description": "Get a single webhook notification",
    "lineNumber": 1407,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "webhookToken",
        "description": "Webhook token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if webhookToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "addProgramToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#addProgramToken",
    "access": "private",
    "description": "Add program token to data object if not already set",
    "lineNumber": 1426,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The adjusted object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The adjusted object"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "handle204Response",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Hyperwallet.js~Hyperwallet.handle204Response",
    "access": "private",
    "description": "Handle 204 response for list calls",
    "lineNumber": 1446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{api-callback} - A wrapper api callback"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The api callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "api-callback"
      ],
      "spread": false,
      "description": "A wrapper api callback"
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Hyperwallet from \"./Hyperwallet\";\n\nmodule.exports = Hyperwallet;\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/utils/ApiClient.js",
    "content": "import request from \"superagent\";\nimport packageJson from \"../../package.json\";\nimport Encryption from \"./Encryption\";\n\n/**\n * The callback interface for api calls\n *\n * @typedef {function} api-callback\n * @param {Object[]} [errors] - In case of an error an array with error objects otherwise undefined\n * @param {string} [errors[].fieldName] - The field name (if error is caused by a particular field)\n * @param {string} errors[].message - The error message\n * @param {string} errors[].code - The error code\n * @param {Object} data - The rest response body\n * @param {Object} res - The raw superagent response object\n */\n\n/**\n * The Hyperwallet API Client\n */\nexport default class ApiClient {\n    /**\n     * Create a instance of the API client\n     *\n     * @param {string} username - The API username\n     * @param {string} password - The API password\n     * @param {string} server - The API server to connect to\n     * @param {string} encryptionData - The API encryption data\n     */\n    constructor(username, password, server, encryptionData) {\n        /**\n         * The API username\n         *\n         * @type {string}\n         * @protected\n         */\n        this.username = username;\n\n        /**\n         * The API password\n         *\n         * @type {string}\n         * @protected\n         */\n        this.password = password;\n\n        /**\n         * The API server to connect to\n         * @type {string}\n         * @protected\n         */\n        this.server = server;\n\n        /**\n         * The Node SDK Version number\n         *\n         * @type {string}\n         * @protected\n         */\n        this.version = packageJson.version;\n\n        /**\n         * The flag shows if encryption is enabled\n         *\n         * @type {boolean}\n         * @protected\n         */\n        this.isEncrypted = false;\n\n        if (encryptionData && encryptionData.clientPrivateKeySetPath && encryptionData.hyperwalletKeySetPath) {\n            this.isEncrypted = true;\n            this.clientPrivateKeySetPath = encryptionData.clientPrivateKeySetPath;\n            this.hyperwalletKeySetPath = encryptionData.hyperwalletKeySetPath;\n            this.encryption = new Encryption(this.clientPrivateKeySetPath, this.hyperwalletKeySetPath);\n        }\n    }\n\n    /**\n     * Do a POST call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)\n     * @param {Object} data - The data to send to the server\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doPost(partialUrl, data, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        let requestDataPromise = new Promise((resolve) => resolve(data));\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            this.createJoseJsonParser();\n            requestDataPromise = this.encryption.encrypt(data);\n        }\n        requestDataPromise.then((requestData) => {\n            request\n                .post(`${this.server}/rest/v3/${partialUrl}`)\n                .auth(this.username, this.password)\n                .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n                .type(contentType)\n                .accept(accept)\n                .query(params)\n                .send(requestData)\n                .end(this.wrapCallback(\"POST\", callback));\n        }).catch(() => callback(\"Failed to encrypt body for POST request\", undefined, undefined));\n    }\n\n    /**\n     * Do a PUT call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)\n     * @param {Object} data - The data to send to the server\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doPut(partialUrl, data, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        let requestDataPromise = new Promise((resolve) => resolve(data));\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            this.createJoseJsonParser();\n            requestDataPromise = this.encryption.encrypt(data);\n        }\n        requestDataPromise.then((requestData) => {\n            request\n                .put(`${this.server}/rest/v3/${partialUrl}`)\n                .auth(this.username, this.password)\n                .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n                .type(contentType)\n                .accept(accept)\n                .query(params)\n                .send(requestData)\n                .end(this.wrapCallback(\"PUT\", callback));\n        }).catch(() => callback(\"Failed to encrypt body for PUT request\", undefined, undefined));\n    }\n\n    /**\n     * Do a GET call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doGet(partialUrl, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            this.createJoseJsonParser();\n        }\n        request\n            .get(`${this.server}/rest/v3/${partialUrl}`)\n            .auth(this.username, this.password)\n            .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n            .type(contentType)\n            .accept(accept)\n            .query(params)\n            .end(this.wrapCallback(\"GET\", callback));\n    }\n\n    /**\n     * Wrap a callback to process possible API and network errors\n     *\n     * @param {string} httpMethod - The http method that is currently processing\n     * @param {api-callback} callback - The final callback\n     * @returns {function(err: Object, res: Object)} - The super agent callback\n     *\n     * @private\n     */\n    wrapCallback(httpMethod, callback = () => null) {\n        return (err, res) => {\n            const expectedContentType = (this.isEncrypted) ? \"application/jose+json\" : \"application/json\";\n            const invalidContentType = res && res.header && res.status !== 204 && res.header[\"content-type\"].indexOf(expectedContentType) === -1;\n            if (invalidContentType) {\n                callback([{\n                    message: \"Invalid Content-Type specified in Response Header\",\n                }], res ? res.body : undefined, res);\n                return;\n            }\n            if (this.isEncrypted) {\n                this.processEncryptedResponse(httpMethod, err, res.body, callback);\n            } else {\n                this.processNonEncryptedResponse(err, res, callback);\n            }\n        };\n    }\n\n    /**\n     * Process non encrypted response from server\n     *\n     * @param {Object} err - Error object\n     * @param {Object} res - Response object\n     * @param {api-callback} callback - The final callback\n     *\n     * @private\n     */\n    processNonEncryptedResponse(err, res, callback) {\n        if (!err) {\n            callback(undefined, res.body, res);\n            return;\n        }\n\n        let errors = [\n            {\n                message: `Could not communicate with ${this.server}`,\n                code: \"COMMUNICATION_ERROR\",\n            },\n        ];\n        if (res && res.body && res.body.errors) {\n            errors = res.body.errors;\n        }\n        callback(errors, res ? res.body : undefined, res);\n    }\n\n    /**\n     * Process encrypted response from server\n     *\n     * @param {string} httpMethod - The http method that is currently processing\n     * @param {Object} err - Error object\n     * @param {Object} res - Response object\n     * @param {api-callback} callback - The final callback\n     *\n     * @private\n     */\n    processEncryptedResponse(httpMethod, err, res, callback) {\n        if (!res) {\n            callback(\"Try to decrypt empty response body\", undefined, undefined);\n        }\n        this.encryption.decrypt(res)\n            .then((decryptedData) => {\n                const responseBody = JSON.parse(decryptedData.payload.toString());\n                if (responseBody.errors) {\n                    const responseWithErrors = {};\n                    responseWithErrors.body = responseBody;\n                    this.processNonEncryptedResponse(responseBody, responseWithErrors, callback);\n                } else {\n                    callback(undefined, responseBody, decryptedData);\n                }\n            })\n            .catch(() => callback(`Failed to decrypt response for ${httpMethod} request`, res, res));\n    }\n\n    /**\n     * Creates response body parser for application/jose+json content-type\n     *\n     * @private\n     */\n    createJoseJsonParser() {\n        request.parse[\"application/jose+json\"] = (res, callback) => {\n            let data = \"\";\n            res.on(\"data\", (chunk) => {\n                data += chunk;\n            });\n            res.on(\"end\", () => {\n                callback(null, data);\n            });\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/src/utils/ApiClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "typedef",
    "name": "api-callback",
    "memberof": "src/utils/ApiClient.js",
    "static": true,
    "longname": "src/utils/ApiClient.js~api-callback",
    "access": "public",
    "description": "The callback interface for api calls",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": true,
        "name": "errors",
        "description": "In case of an error an array with error objects otherwise undefined"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "errors[].fieldName",
        "description": "The field name (if error is caused by a particular field)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errors[].message",
        "description": "The error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errors[].code",
        "description": "The error code"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The rest response body"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The raw superagent response object"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "api-callback"
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "ApiClient",
    "memberof": "src/utils/ApiClient.js",
    "static": true,
    "longname": "src/utils/ApiClient.js~ApiClient",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/utils/ApiClient.js",
    "importStyle": "ApiClient",
    "description": "The Hyperwallet API Client",
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#constructor",
    "access": "public",
    "description": "Create a instance of the API client",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "The API username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "The API password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The API server to connect to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionData",
        "description": "The API encryption data"
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "username",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#username",
    "access": "protected",
    "description": "The API username",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "password",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#password",
    "access": "protected",
    "description": "The API password",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "server",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#server",
    "access": "protected",
    "description": "The API server to connect to",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "version",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#version",
    "access": "protected",
    "description": "The Node SDK Version number",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "isEncrypted",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#isEncrypted",
    "access": "protected",
    "description": "The flag shows if encryption is enabled",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "clientPrivateKeySetPath",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#clientPrivateKeySetPath",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "hyperwalletKeySetPath",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#hyperwalletKeySetPath",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "encryption",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#encryption",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "doPost",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doPost",
    "access": "public",
    "description": "Do a POST call to the Hyperwallet API server",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to send to the server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "doPut",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doPut",
    "access": "public",
    "description": "Do a PUT call to the Hyperwallet API server",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to send to the server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "doGet",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doGet",
    "access": "public",
    "description": "Do a GET call to the Hyperwallet API server",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v3/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "wrapCallback",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#wrapCallback",
    "access": "private",
    "description": "Wrap a callback to process possible API and network errors",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(err: Object, res: Object)} - The super agent callback"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "httpMethod",
        "description": "The http method that is currently processing"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(err: Object, res: Object)"
      ],
      "spread": false,
      "description": "The super agent callback"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "processNonEncryptedResponse",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#processNonEncryptedResponse",
    "access": "private",
    "description": "Process non encrypted response from server",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Error object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response object"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "processEncryptedResponse",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#processEncryptedResponse",
    "access": "private",
    "description": "Process encrypted response from server",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "httpMethod",
        "description": "The http method that is currently processing"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Error object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response object"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "createJoseJsonParser",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#createJoseJsonParser",
    "access": "private",
    "description": "Creates response body parser for application/jose+json content-type",
    "lineNumber": 251,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/utils/Encryption.js",
    "content": "import jose from \"node-jose\";\nimport fs from \"fs\";\nimport request from \"superagent\";\n\n/**\n * The Hyperwallet Encryption processor\n */\nexport default class Encryption {\n    /**\n     * Create a instance of the Encryption service\n     *\n     * @param {string} clientPrivateKeySetLocation - String that can be a URL or path to file with client JWK set\n     * @param {string} hyperwalletKeySetLocation - String that can be a URL or path to file with hyperwallet JWK set\n     * @param {string} encryptionAlgorithm - JWE encryption algorithm, by default value = RSA-OAEP-256\n     * @param {string} signAlgorithm - JWS signature algorithm, by default value = RS256\n     * @param {string} encryptionMethod - JWE encryption method, by default value = A256CBC-HS512\n     * @param {string} jwsExpirationMinutes - Minutes when JWS signature is valid\n     */\n    constructor(clientPrivateKeySetLocation, hyperwalletKeySetLocation, encryptionAlgorithm = \"RSA-OAEP-256\",\n        signAlgorithm = \"RS256\", encryptionMethod = \"A256CBC-HS512\", jwsExpirationMinutes = 5) {\n        /**\n         * String that can be a URL or path to file with client JWK set\n         *\n         * @type {string}\n         * @protected\n         */\n        this.clientPrivateKeySetLocation = clientPrivateKeySetLocation;\n\n        /**\n         * String that can be a URL or path to file with hyperwallet JWK set\n         *\n         * @type {string}\n         * @protected\n         */\n        this.hyperwalletKeySetLocation = hyperwalletKeySetLocation;\n\n        /**\n         * Client KeyStore object\n         *\n         * @type {string}\n         * @protected\n         */\n        this.clientKeyStore = null;\n\n        /**\n         * Hyperwallet KeyStore object\n         *\n         * @type {string}\n         * @protected\n         */\n        this.hwKeyStore = null;\n\n        /**\n         * JWE encryption algorithm, by default value = RSA-OAEP-256\n         *\n         * @type {string}\n         * @protected\n         */\n        this.encryptionAlgorithm = encryptionAlgorithm;\n\n        /**\n         * JWS signature algorithm, by default value = RS256\n         *\n         * @type {string}\n         * @protected\n         */\n        this.signAlgorithm = signAlgorithm;\n\n        /**\n         * JWE encryption method, by default value = A256CBC-HS512\n         *\n         * @type {string}\n         * @protected\n         */\n        this.encryptionMethod = encryptionMethod;\n\n        /**\n         * Minutes when JWS signature is valid, by default value = 5\n         *\n         * @type {number}\n         * @protected\n         */\n        this.jwsExpirationMinutes = jwsExpirationMinutes;\n    }\n\n    /**\n     * Makes an encrypted request : 1) signs the request body; 2) encrypts payload after signature\n     *\n     * @param {string} body - The request body to be encrypted\n     */\n    encrypt(body) {\n        return new Promise((resolve, reject) => {\n            const keyStorePromise = (this.clientKeyStore && this.hwKeyStore) ? Promise.resolve(this.keyStore) : this.createKeyStore();\n            keyStorePromise\n                .then(() => this.signBody(body))\n                .then((signedBody) => this.encryptBody(signedBody))\n                .then((result) => resolve(result))\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * Decrypts encrypted response : 1) decrypts the request body; 2) verifies the payload signature\n     *\n     * @param {string} body - The response body to be decrypted\n     */\n    decrypt(body) {\n        return new Promise((resolve, reject) => {\n            const keyStorePromise = this.keyStore ? Promise.resolve(this.keyStore) : this.createKeyStore();\n            keyStorePromise\n                .then(() => this.decryptBody(body))\n                .then((decryptedBody) => this.checkSignature(decryptedBody.plaintext))\n                .then((result) => resolve(result))\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * Verify if response body has a valid signature\n     *\n     * @param {string} body - The response body to be verified\n     */\n    checkSignature(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.hwKeyStore.all({ alg: this.signAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.signAlgorithm}`));\n            }\n            const options = {\n                handlers: {\n                    exp: (jws) => {\n                        if (this.getCurrentTime() > jws.header.exp) {\n                            reject(new Error(\"JWS signature has expired\"));\n                        }\n                    },\n                },\n            };\n            jose.JWS.createVerify(key, options)\n                .verify(body.toString())\n                .then((result) => resolve(result))\n                .catch(() => reject(new Error(`Failed to verify signature with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Decrypts the response body\n     *\n     * @param {string} body - The response body to be decrypted\n     */\n    decryptBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.clientKeyStore.all({ alg: this.encryptionAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.encryptionAlgorithm}`));\n            }\n            jose.JWE.createDecrypt(key)\n                .decrypt(body)\n                .then((result) => resolve(result))\n                .catch(() => reject(new Error(`Failed to decrypt payload with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Encrypts the request body\n     *\n     * @param {string} body - The request body to be encrypted\n     */\n    encryptBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.hwKeyStore.all({ alg: this.encryptionAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.encryptionAlgorithm}`));\n            }\n            const encryptionHeader = {\n                format: \"compact\",\n                alg: key.alg,\n                enc: this.encryptionMethod,\n                kid: key.kid,\n            };\n            jose.JWE.createEncrypt(encryptionHeader, key)\n                .update(body)\n                .final()\n                .then((result) => resolve(result))\n                .catch(() => reject(new Error(`Failed to encrypt payload with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Makes signature for request body\n     *\n     * @param {string} body - The request body to be signed\n     */\n    signBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.clientKeyStore.all({ alg: this.signAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.signAlgorithm}`));\n            }\n            const signHeader = {\n                format: \"compact\",\n                alg: key.alg,\n                fields: {\n                    crit: [\"exp\"],\n                    exp: this.getSignatureExpirationTime(),\n                    kid: key.kid,\n                },\n            };\n            jose.JWS.createSign(signHeader, key)\n                .update(JSON.stringify(body), \"utf8\")\n                .final()\n                .then((result) => resolve(result))\n                .catch(() => reject(new Error(`Failed to sign with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Calculates signature expiration time in seconds ( by default expiration time = 5 minutes )\n     */\n    getSignatureExpirationTime() {\n        const millisecondsInMinute = 60000;\n        const millisecondsInSecond = 1000;\n        const currentTime = new Date(new Date().getTime() + this.jwsExpirationMinutes * millisecondsInMinute).getTime();\n        return Math.round(currentTime / millisecondsInSecond);\n    }\n\n    /**\n     * Get current time in seconds\n     */\n    getCurrentTime() {\n        const millisecondsInSecond = 1000;\n        return Math.round(new Date().getTime() / millisecondsInSecond);\n    }\n\n    /**\n     * Creates 2 JWK key stores : 1) for client keys 2) for hyperwallet keys\n     */\n    createKeyStore() {\n        return new Promise((resolve, reject) => {\n            this.readKeySet(this.hyperwalletKeySetLocation)\n                .then((jwkSet) => this.createKeyStoreFromJwkSet(this.hyperwalletKeySetLocation, jwkSet))\n                .then(() => this.readKeySet(this.clientPrivateKeySetLocation))\n                .then((jwkSet) => this.createKeyStoreFromJwkSet(this.clientPrivateKeySetLocation, jwkSet))\n                .then((result) => resolve(result))\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * Converts JWK set in JSON format to JOSE key store format\n     *\n     * @param {string} jwkSetPath - The location of JWK set (can be URL string or path to file)\n     * @param {string} jwkSet - The JSON representation of JWK set, to be converted to keystore\n     */\n    createKeyStoreFromJwkSet(jwkSetPath, jwkSet) {\n        return new Promise((resolve, reject) => {\n            jose.JWK.asKeyStore(jwkSet).\n                then((result) => {\n                    if (jwkSetPath === this.clientPrivateKeySetLocation) {\n                        this.clientKeyStore = result;\n                    } else {\n                        this.hwKeyStore = result;\n                    }\n                    resolve(result);\n                })\n                .catch(() => reject(new Error(\"Failed to create keyStore from given jwkSet\")));\n        });\n    }\n\n    /**\n     * Reads JWK set in JSON format either from given URL or path to local file\n     *\n     * @param {string} keySetPath - The location of JWK set (can be URL string or path to file)\n     */\n    readKeySet(keySetPath) {\n        return new Promise((resolve, reject) => {\n            if (fs.existsSync(keySetPath)) {\n                fs.readFile(keySetPath, { encoding: \"utf-8\" }, (err, keySetData) => {\n                    if (!err) {\n                        resolve(keySetData);\n                    } else {\n                        reject(new Error(err));\n                    }\n                });\n            } else {\n                this.checkUrlIsValid(keySetPath, (isValid) => {\n                    if (isValid) {\n                        request(keySetPath, (error, response) => {\n                            if (!error) {\n                                const responseBody = response.body && Object.keys(response.body).length !== 0 ? response.body : response.text;\n                                resolve(responseBody);\n                            }\n                        });\n                    } else {\n                        reject(new Error(`Wrong JWK set location path = ${keySetPath}`));\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Checks if an input string is a valid URL\n     *\n     * @param {string} url - The URL string to be verified\n     * @param {string} callback - The callback method to process the verification result of input url\n     */\n    checkUrlIsValid(url, callback) {\n        request(url, (error, response) => {\n            callback(!error && response.statusCode === 200);\n        });\n    }\n\n    /**\n     * Convert encrypted string to array of Buffer\n     *\n     * @param {string} encryptedBody - Encrypted body to be decoded\n     */\n    base64Decode(encryptedBody) {\n        const parts = encryptedBody.split(\".\");\n        const decodedParts = [];\n        parts.forEach(elem => {\n            decodedParts.push(jose.util.base64url.decode(elem));\n        });\n        const decodedBody = {};\n        decodedBody.parts = decodedParts;\n        return decodedBody;\n    }\n\n    /**\n     * Convert array of Buffer to encrypted string\n     *\n     * @param {string} decodedBody - Array of Buffer to be decoded to encrypted string\n     */\n    base64Encode(decodedBody) {\n        const encodedParts = [];\n        decodedBody.parts.forEach(part => {\n            encodedParts.push(jose.util.base64url.encode(Buffer.from(JSON.parse(JSON.stringify(part)).data)));\n        });\n        return encodedParts.join(\".\");\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/src/utils/Encryption.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "Encryption",
    "memberof": "src/utils/Encryption.js",
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/utils/Encryption.js",
    "importStyle": "Encryption",
    "description": "The Hyperwallet Encryption processor",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#constructor",
    "access": "public",
    "description": "Create a instance of the Encryption service",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "clientPrivateKeySetLocation",
        "description": "String that can be a URL or path to file with client JWK set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hyperwalletKeySetLocation",
        "description": "String that can be a URL or path to file with hyperwallet JWK set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionAlgorithm",
        "description": "JWE encryption algorithm, by default value = RSA-OAEP-256"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signAlgorithm",
        "description": "JWS signature algorithm, by default value = RS256"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionMethod",
        "description": "JWE encryption method, by default value = A256CBC-HS512"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwsExpirationMinutes",
        "description": "Minutes when JWS signature is valid"
      }
    ]
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "clientPrivateKeySetLocation",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#clientPrivateKeySetLocation",
    "access": "protected",
    "description": "String that can be a URL or path to file with client JWK set",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "hyperwalletKeySetLocation",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#hyperwalletKeySetLocation",
    "access": "protected",
    "description": "String that can be a URL or path to file with hyperwallet JWK set",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "clientKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#clientKeyStore",
    "access": "protected",
    "description": "Client KeyStore object",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "hwKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#hwKeyStore",
    "access": "protected",
    "description": "Hyperwallet KeyStore object",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "encryptionAlgorithm",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptionAlgorithm",
    "access": "protected",
    "description": "JWE encryption algorithm, by default value = RSA-OAEP-256",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "signAlgorithm",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#signAlgorithm",
    "access": "protected",
    "description": "JWS signature algorithm, by default value = RS256",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "encryptionMethod",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptionMethod",
    "access": "protected",
    "description": "JWE encryption method, by default value = A256CBC-HS512",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "jwsExpirationMinutes",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#jwsExpirationMinutes",
    "access": "protected",
    "description": "Minutes when JWS signature is valid, by default value = 5",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "encrypt",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encrypt",
    "access": "public",
    "description": "Makes an encrypted request : 1) signs the request body; 2) encrypts payload after signature",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be encrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "decrypt",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#decrypt",
    "access": "public",
    "description": "Decrypts encrypted response : 1) decrypts the request body; 2) verifies the payload signature",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be decrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "checkSignature",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#checkSignature",
    "access": "public",
    "description": "Verify if response body has a valid signature",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be verified"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "decryptBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#decryptBody",
    "access": "public",
    "description": "Decrypts the response body",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be decrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "encryptBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptBody",
    "access": "public",
    "description": "Encrypts the request body",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be encrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "signBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#signBody",
    "access": "public",
    "description": "Makes signature for request body",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be signed"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "getSignatureExpirationTime",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#getSignatureExpirationTime",
    "access": "public",
    "description": "Calculates signature expiration time in seconds ( by default expiration time = 5 minutes )",
    "lineNumber": 219,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#getCurrentTime",
    "access": "public",
    "description": "Get current time in seconds",
    "lineNumber": 229,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "createKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#createKeyStore",
    "access": "public",
    "description": "Creates 2 JWK key stores : 1) for client keys 2) for hyperwallet keys",
    "lineNumber": 237,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "createKeyStoreFromJwkSet",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#createKeyStoreFromJwkSet",
    "access": "public",
    "description": "Converts JWK set in JSON format to JOSE key store format",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwkSetPath",
        "description": "The location of JWK set (can be URL string or path to file)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwkSet",
        "description": "The JSON representation of JWK set, to be converted to keystore"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "readKeySet",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#readKeySet",
    "access": "public",
    "description": "Reads JWK set in JSON format either from given URL or path to local file",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keySetPath",
        "description": "The location of JWK set (can be URL string or path to file)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "checkUrlIsValid",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#checkUrlIsValid",
    "access": "public",
    "description": "Checks if an input string is a valid URL",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL string to be verified"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback method to process the verification result of input url"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "base64Decode",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#base64Decode",
    "access": "public",
    "description": "Convert encrypted string to array of Buffer",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptedBody",
        "description": "Encrypted body to be decoded"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "base64Encode",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#base64Encode",
    "access": "public",
    "description": "Convert array of Buffer to encrypted string",
    "lineNumber": 334,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decodedBody",
        "description": "Array of Buffer to be decoded to encrypted string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/hyperwallet/node-sdk.png?branch=master)](https://travis-ci.org/hyperwallet/node-sdk)\n[![Coverage Status](https://coveralls.io/repos/github/hyperwallet/node-sdk/badge.svg?branch=master)](https://coveralls.io/github/hyperwallet/node-sdk?branch=master)\n[![Document](http://hyperwallet.github.io/node-sdk/badge.svg?t=0)](http://hyperwallet.github.io/node-sdk)\n[![NPM version](https://badge.fury.io/js/hyperwallet-sdk.png)](http://badge.fury.io/js/hyperwallet-sdk)\n\nHyperwallet REST SDK (Beta)\n===========================\n\nA library to manage users, transfer methods and payments through the Hyperwallet API\n\nPrerequisites\n------------\n\nHyperwallet's NodeJS server SDK requires at minimum NodeJS 6.15.1 and above.\n\nInstallation\n------------\n\n```bash\n$ npm install hyperwallet-sdk\n```\n\n\nDocumentation\n-------------\n\nDocumentation is available at http://hyperwallet.github.io/node-sdk.\n\n\nAPI Overview\n------------\n\nTo write an app using the SDK\n\n* Register for a sandbox account and get your username, password and program token at the [Hyperwallet Program Portal](https://portal.hyperwallet.com).\n* Add dependency `hyperwallet-sdk` to your `package.json`.\n* Require `hyperwallet-sdk` in your file\n  ```js\n  var Hyperwallet = require(\"hyperwallet-sdk\");\n  ```\n  \n* Create a instance of the Hyperwallet Client (with username, password and program token)\n  ```js\n  var client = new Hyperwallet({\n    username: \"restapiuser@4917301618\",\n    password: \"mySecurePassword!\",\n    programToken: \"prg-645fc30d-83ed-476c-a412-32c82738a20e\",\n  });\n  ```\n* Start making API calls (e.g. create a user)\n  ```js\n  var userData = {\n     clientUserId: \"test-client-id-1\",\n     profileType: \"INDIVIDUAL\",\n     firstName: \"Daffyd\",\n     lastName: \"y Goliath\",\n     email: \"testmail-1@hyperwallet.com\",\n     addressLine1: \"123 Main Street\",\n     city: \"Austin\",\n     stateProvince: \"TX\",\n     country: \"US\",\n     postalCode: \"78701\",\n  };\n\n  client.createUser(userData, function(errors, body, res) {\n     if (errors) {\n        console.log(\"Create User Failed\");\n        console.log(errors);\n     } else {\n        console.log(\"Create User Response\");\n        console.log(body);\n     }\n  });\n  ```\n  The displayed callback format is valid for all SDK methods. For more information see the [Callback Documentation](http://hyperwallet.github.io/node-sdk/typedef/index.html#static-typedef-api-callback).\n\n\nDevelopment\n-----------\n\nRun the tests using [`npm`](https://www.npmjs.com/):\n\n```bash\n$ npm install\n$ npm test\n```\n\n\nReference\n---------\n\n[REST API Reference](https://sandbox.hyperwallet.com/developer-portal/#/docs)\n\n\nLicense\n-------\n\n[MIT](https://raw.githubusercontent.com/hyperwallet/node-sdk/master/LICENSE)\n",
    "longname": "/home/travis/build/hyperwallet/node-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"hyperwallet-sdk\",\n  \"version\": \"1.4.0\",\n  \"description\": \"A library to manage users, transfer methods and payments through the Hyperwallet API\",\n  \"main\": \"lib/index.js\",\n  \"dependencies\": {\n    \"node-jose\": \"^1.0.0\",\n    \"object-assign\": \"^4.1.0\",\n    \"superagent\": \"^4.0.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint ./src && eslint ./test && eslint ./examples\",\n    \"prod\": \"babel src -d lib\",\n    \"docs\": \"esdoc -c ./.esdoc.json\",\n    \"deploy-docs\": \"npm run docs && gh-pages -d docs\",\n    \"test\": \"npm run lint && npm run test-unit\",\n    \"test-unit\": \"mocha --compilers js:babel-register test/**/*.js test/*.js\",\n    \"test-coverage\": \"babel-node ./node_modules/.bin/isparta cover _mocha -- test/**/*.js test/*.js\",\n    \"coveralls\": \"npm run test-coverage && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\",\n    \"prepublish-prod\": \"npm test && npm run prod\",\n    \"publish-please\": \"publish-please\",\n    \"prepublish\": \"publish-please guard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/hyperwallet/rest-v3-node-sdk.git\"\n  },\n  \"keywords\": [\n    \"hyperwallet\",\n    \"sdk\",\n    \"rest\",\n    \"bankaccount\",\n    \"payout\",\n    \"creditcard\",\n    \"ach\"\n  ],\n  \"author\": \"Florian Krauthan <fkrauthan@hyperwallet.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/hyperwallet/rest-v3-node-sdk/issues\"\n  },\n  \"homepage\": \"http://hyperwallet.github.io/rest-v3-node-sdk\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.9.0\",\n    \"babel-eslint\": \"^8.2.6\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-register\": \"^6.9.0\",\n    \"chai\": \"^3.5.0\",\n    \"coveralls\": \"^3.0.2\",\n    \"dirty-chai\": \"^1.2.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb-base\": \"^3.0.1\",\n    \"eslint-plugin-import\": \"^1.8.0\",\n    \"gh-pages\": \"^0.11.0\",\n    \"isparta\": \"^4.1.1\",\n    \"mocha\": \"^5.2.0\",\n    \"nock\": \"^10.0.4\",\n    \"nyc\": \"15.0.0\",\n    \"publish-please\": \"^5.4.3\",\n    \"sinon\": \"^1.17.4\",\n    \"sinon-chai\": \"^2.8.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.12\",\n    \"iojs\": \">=1.0\"\n  }\n}\n",
    "longname": "/home/travis/build/hyperwallet/node-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 174,
    "kind": "testFile",
    "name": "test/Hyperwallet.spec.js",
    "content": "import chai, { expect } from \"chai\";\nimport dirtyChai from \"dirty-chai\";\nimport sinon from \"sinon\";\nimport sinonChai from \"sinon-chai\";\n\nimport Hyperwallet from \"../src/Hyperwallet\";\n\nchai.should();\nchai.use(dirtyChai);\nchai.use(sinonChai);\n\n/** @test {Hyperwallet} */\ndescribe(\"Hyperwallet\", () => {\n    /** @test {Hyperwallet#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {Hyperwallet#constructor} */\n        it(\"should initialize ApiClient with default server\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            client.client.username.should.be.equal(\"test-username\");\n            client.client.password.should.be.equal(\"test-password\");\n            client.client.server.should.be.equal(\"https://api.sandbox.hyperwallet.com\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should set programToken to undefined if not provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            expect(client.programToken).to.be.undefined();\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should set programToken if provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.programToken.should.be.equal(\"test-program-token\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should initialize ApiClient with provided server\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                server: \"test-server\",\n            });\n\n            client.client.server.should.be.equal(\"test-server\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if username is missing\", () => {\n            expect(() => new Hyperwallet({\n                password: \"test-password\",\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if password is missing\", () => {\n            expect(() => new Hyperwallet({\n                username: \"test-username\",\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if username and password is missing\", () => {\n            expect(() => new Hyperwallet({\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n    });\n\n    //--------------------------------------\n    // TLS verification\n    //--------------------------------------\n\n    describe(\"listUsers()\", () => {\n        it(\"should not have any TLS issues\", (cb) => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.listUsers({}, (err, body, res) => {\n                res.status.should.be.equal(401);\n                cb();\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Users\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createUser} */\n    describe(\"createUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createUser} */\n        it(\"should do post call to users endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.createUser({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#createUser} */\n        it(\"should do post call to users endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.createUser({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getUser} */\n    describe(\"getUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUser} */\n        it(\"should do get call if userToken is provided\", () => {\n            const callback = () => null;\n            client.getUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateUser} */\n    describe(\"updateUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateUser(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should do put call to users endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.updateUser(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should do put call to users endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.updateUser(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listUsers} */\n    describe(\"listUsers()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listUsers({ test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listUsers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {});\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listUsers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#getUserStatusTransition} */\n    describe(\"getUserStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUserStatusTransition(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUserStatusTransition(\"test-user-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should do get call if userToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getUserStatusTransition(\"test-user-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listUserStatusTransitions} */\n    describe(\"listUserStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listUserStatusTransitions(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listUserStatusTransitions(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listUserStatusTransitions(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listUserStatusTransitions(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Bank Cards\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createBankCard} */\n    describe(\"createBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCard(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCard} */\n        it(\"should do post call to bank cards endpoint\", () => {\n            const callback = () => null;\n            client.createBankCard(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankCard} */\n    describe(\"getBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCard(\"test-user-token\", undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should do get call if userToken and bankCardToken is provided\", () => {\n            const callback = () => null;\n            client.getBankCard(\"test-user-token\", \"test-bank-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateBankCard} */\n    describe(\"updateBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankCard(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankCard(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should do put call to bank cards endpoint\", () => {\n            const callback = () => null;\n            client.updateBankCard(\"test-user-token\", \"test-bank-card-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankCards} */\n    describe(\"listBankCards()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCards(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBankCards(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {});\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateBankCard} */\n    describe(\"deactivate()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankCard(\"test-user-token\", undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateBankCard(\"test-user-token\", \"test-bank-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createBankCardStatusTransition} */\n    describe(\"createBankCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCardStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCardStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should send post call to bank card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankCardStatusTransition} */\n    describe(\"getBankCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should do get call if userToken, bankCardToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankCardStatusTransitions} */\n    describe(\"listBankCardStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCardStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCardStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Authentication Token\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getAuthenticationToken} */\n    describe(\"getAuthenticationToken()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getAuthenticationToken} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getAuthenticationToken(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getAuthenticationToken} */\n        it(\"should do post call to authentication token endpoint\", () => {\n            const callback = () => null;\n            client.getAuthenticationToken(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/authentication-token\", {}, {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Paper Checks\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPaperCheck} */\n    describe(\"createPaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheck(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheck} */\n        it(\"should do post call to paper checks endpoint\", () => {\n            const callback = () => null;\n            client.createPaperCheck(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaperCheck} */\n    describe(\"getPaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheck(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheck(\"test-user-token\", undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should do get call if userToken and paperCheckToken is provided\", () => {\n            const callback = () => null;\n            client.getPaperCheck(\"test-user-token\", \"test-paper-check-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updatePaperCheck} */\n    describe(\"updatePaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePaperCheck(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePaperCheck(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should do put call to paper checks endpoint\", () => {\n            const callback = () => null;\n            client.updatePaperCheck(\"test-user-token\", \"test-paper-check-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaperChecks} */\n    describe(\"listPaperChecks()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperChecks(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPaperChecks(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaperChecks(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {});\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaperChecks(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivatePaperCheck} */\n    describe(\"deactivate()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePaperCheck(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePaperCheck(\"test-user-token\", undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivatePaperCheck(\"test-user-token\", \"test-paper-check-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n    describe(\"createPaperCheckStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheckStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheckStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should send post call to paper check status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n    describe(\"getPaperCheckStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should do get call if userToken, paperCheckToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n    describe(\"listPaperCheckStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperCheckStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperCheckStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Transfers\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createTransfer} */\n    describe(\"createTransfer()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if sourceToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                test: \"value\",\n            }, callback)).to.throw(\"sourceToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if destinationToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                sourceToken: \"sourceToken\",\n            }, callback)).to.throw(\"destinationToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if clientTransferId is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n            }, callback)).to.throw(\"clientTransferId is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should do post call to transfers endpoint\", () => {\n            const callback = () => null;\n            client.createTransfer({\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n                clientTransferId: \"clientTransferId\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n                clientTransferId: \"clientTransferId\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getTransfer} */\n    describe(\"getTransfer()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransfer} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransfer(undefined, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransfer} */\n        it(\"should do get call if transferToken is provided\", () => {\n            const callback = () => null;\n            client.getTransfer(\"test-transfer-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransfers} */\n    describe(\"listTransfers()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listTransfers({ test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransfers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {});\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransfers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createTransferStatusTransition} */\n    describe(\"createTransferStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransferStatusTransition} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransferStatusTransition(undefined, { test: \"value\" }, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferStatusTransition} */\n        it(\"should send post call to transfer status transition endpoint\", () => {\n            const callback = () => null;\n            client.createTransferStatusTransition(\"test-transfer-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // PayPal accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPayPalAccount} */\n    describe(\"createPayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if transferMethodCountry is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", { test: \"value\" }, callback)).to.throw(\"transferMethodCountry is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if transferMethodCurrency is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n            }, callback)).to.throw(\"transferMethodCurrency is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if email is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n            }, callback)).to.throw(\"email is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should do post call to PayPal account endpoint\", () => {\n            const callback = () => null;\n            client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                email: \"email\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                email: \"email\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPayPalAccount} */\n    describe(\"getPayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccount(\"test-user-token\", undefined, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should do get call if userToken and payPalAccountToken is provided\", () => {\n            const callback = () => null;\n            client.getPayPalAccount(\"test-user-token\", \"test-paypal-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPayPalAccounts} */\n    describe(\"listPayPalAccounts()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccounts(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPayPalAccounts(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPayPalAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {});\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPayPalAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n    describe(\"createPayPalAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccountStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccountStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should send post call to paypal account status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPayPalAccountStatusTransition(\"test-user-token\", \"test-paypal-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Prepaid Cards\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPrepaidCard} */\n    describe(\"createPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCard(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCard} */\n        it(\"should do post call to prepaid cards endpoint\", () => {\n            const callback = () => null;\n            client.createPrepaidCard(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPrepaidCard} */\n    describe(\"getPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCard(\"test-user-token\", undefined, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should do get call if userToken and prepaidCardToken is provided\", () => {\n            const callback = () => null;\n            client.getPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updatePrepaidCard} */\n    describe(\"updatePrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePrepaidCard(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePrepaidCard(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should do put call to prepaid cards endpoint\", () => {\n            const callback = () => null;\n            client.updatePrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPrepaidCards} */\n    describe(\"listPrepaidCards()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCards(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPrepaidCards(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPrepaidCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {});\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPrepaidCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    const PREPAID_CARD_STATUS_CHANGE_METHODS = {\n        suspend: \"SUSPENDED\",\n        unsuspend: \"UNSUSPENDED\",\n        lostOrStolen: \"LOST_OR_STOLEN\",\n        deactivate: \"DE_ACTIVATED\",\n        lock: \"LOCKED\",\n        unlock: \"UNLOCKED\",\n    };\n    Object.keys(PREPAID_CARD_STATUS_CHANGE_METHODS).forEach((method) => {\n        const methodName = `${method}PrepaidCard`;\n\n        describe(`${methodName}()`, () => {\n            let client;\n            let apiClientSpy;\n\n            beforeEach(() => {\n                apiClientSpy = sinon.spy();\n                client = new Hyperwallet({\n                    username: \"test-username\",\n                    password: \"test-password\",\n                });\n                client.client = {\n                    doPost: apiClientSpy,\n                };\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(\"should throw error if userToken is missing\", () => {\n                const callback = () => null;\n                expect(() => client[methodName](undefined, undefined, callback)).to.throw(\"userToken is required\");\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(\"should throw error if prepaidCardToken is missing\", () => {\n                const callback = () => null;\n                expect(() => client[methodName](\"test-user-token\", undefined, callback)).to.throw(\"prepaidCardToken is required\");\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(`should send transition to '${PREPAID_CARD_STATUS_CHANGE_METHODS[method]}'`, () => {\n                const callback = () => null;\n                client[methodName](\"test-user-token\", \"test-prepaid-card-token\", callback);\n\n                apiClientSpy.should.have.been.calledOnce();\n                apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {\n                    transition: PREPAID_CARD_STATUS_CHANGE_METHODS[method],\n                }, {}, callback);\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n    describe(\"createPrepaidCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCardStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCardStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should send post call to prepaid card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n    describe(\"getPrepaidCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should do get call if userToken, prepaidCardToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n    describe(\"listPrepaidCardStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCardStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCardStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Bank Accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createBankAccount} */\n    describe(\"createBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccount(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccount} */\n        it(\"should do post call to bank accounts endpoint\", () => {\n            const callback = () => null;\n            client.createBankAccount(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankAccount} */\n    describe(\"getBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccount(\"test-user-token\", undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should do get call if userToken and bankAccountToken is provided\", () => {\n            const callback = () => null;\n            client.getBankAccount(\"test-user-token\", \"test-bank-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateBankAccount} */\n    describe(\"updateBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankAccount(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankAccount(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should do put call to bank accounts endpoint\", () => {\n            const callback = () => null;\n            client.updateBankAccount(\"test-user-token\", \"test-bank-account-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankAccounts} */\n    describe(\"listBankAccounts()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccounts(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBankAccounts(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {});\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateBankAccount} */\n    describe(\"deactivateBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankAccount(\"test-user-token\", undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should send transition to 'DE-ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateBankAccount(\"test-user-token\", \"test-bank-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {\n                transition: \"DE-ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createBankAccountStatusTransition} */\n    describe(\"createBankAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccountStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccountStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should send post call to prepaid card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankAccountStatusTransition} */\n    describe(\"getBankAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should do get call if userToken, bankAccountToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n    describe(\"listBankAccountStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccountStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccountStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Balances\n    //--------------------------------------\n\n    /** @test {Hyperwallet#listBalancesForUser} */\n    describe(\"listBalancesForUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForUser(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBalancesForUser(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n    describe(\"listBalancesForPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForPrepaidCard(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForPrepaidCard(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listBalancesForAccount} */\n    describe(\"listBalancesForAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForAccount(undefined, undefined, {}, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForAccount(\"test-program-token\", undefined, {}, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Payments\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPayment} */\n    describe(\"createPayment()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayment} */\n        it(\"should do post call to payments endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.createPayment({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#createPayment} */\n        it(\"should do post call to payments endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.createPayment({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPayment} */\n    describe(\"getPayment()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPayment} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayment(undefined, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayment} */\n        it(\"should do get call if paymentToken is provided\", () => {\n            const callback = () => null;\n            client.getPayment(\"test-payment-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPayments} */\n    describe(\"listPayments()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPayments({ test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPayments({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {});\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPayments({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createPaymentStatusTransition} */\n    describe(\"createPaymentStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaymentStatusTransition} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaymentStatusTransition(undefined, { test: \"value\" }, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaymentStatusTransition} */\n        it(\"should send post call to payment status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPaymentStatusTransition(\"test-payment-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaymentStatusTransition} */\n    describe(\"getPaymentStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaymentStatusTransition(undefined, undefined, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaymentStatusTransition(\"test-payment-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should do get call if paymentToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPaymentStatusTransition(\"test-payment-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaymentStatusTransitions} */\n    describe(\"listPaymentStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaymentStatusTransitions(undefined, {}, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPaymentStatusTransitions(\"test-payment-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaymentStatusTransitions(\"test-payment-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaymentStatusTransitions(\"test-payment-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Programs\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getProgram} */\n    describe(\"getProgram()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getProgram} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgram(undefined, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgram} */\n        it(\"should do get call if programToken is provided\", () => {\n            const callback = () => null;\n            client.getProgram(\"test-program-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Program Accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getProgramAccount} */\n    describe(\"getProgramAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgramAccount(undefined, undefined, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgramAccount(\"test-program-token\", undefined, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should do get call if programToken is provided\", () => {\n            const callback = () => null;\n            client.getProgramAccount(\"test-program-token\", \"test-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Transfer Method Configurations\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getTransferMethodConfiguration} */\n    describe(\"getTransferMethodConfiguration()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(undefined, undefined, undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if country is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", undefined, undefined, undefined, undefined, callback)).to.throw(\"country is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if currency is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", undefined, undefined, undefined, callback)).to.throw(\"currency is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if type is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", undefined, undefined, callback)).to.throw(\"type is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if profileType is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", \"test-type\", undefined, callback)).to.throw(\"profileType is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should do get call if userToken, country, currency, type and profileType is provided\", () => {\n            const callback = () => null;\n            client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", \"test-type\", \"test-profile-type\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n                country: \"test-country\",\n                currency: \"test-currency\",\n                type: \"test-type\",\n                profileType: \"test-profile-type\",\n            }, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransferMethodConfigurations} */\n    describe(\"listTransferMethodConfigurations()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferMethodConfigurations(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listTransferMethodConfigurations(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                test: \"value\",\n                userToken: \"test-user-token\",\n            });\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransferMethodConfigurations(\"test-user-token\", undefined, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n            });\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransferMethodConfigurations(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n            });\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"createTransferMethod()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            const userToken = null;\n            const cacheToken = null;\n\n            expect(() => client.createTransferMethod(userToken, cacheToken, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should throw error if cacheToken is missing\", () => {\n            const callback = () => null;\n            const userToken = \"test-user-token\";\n            const cacheToken = null;\n\n            expect(() => client.createTransferMethod(userToken, cacheToken, callback)).to.throw(\"jsonCacheToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should do post call with userToken and cacheToken\", () => {\n            const callback = () => null;\n            const userToken = \"test-user-token\";\n            const cacheToken = \"test-cache-token\";\n            client.createTransferMethod(userToken, cacheToken, { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/transfer-methods\", { test: \"value\" }, { \"Json-Cache-Token\": \"test-cache-token\" });\n        });\n    });\n\n    //--------------------------------------\n    // Receipts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n    describe(\"listReceiptsForProgramAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForProgramAccount(undefined, undefined, {}, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForProgramAccount(\"test-program-token\", undefined, {}, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listReceiptsForUser} */\n    describe(\"listReceiptsForUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForUser(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForUser(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n    describe(\"listReceiptsForPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForPrepaidCard(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForPrepaidCard(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Webhooks\n    //--------------------------------------\n\n    describe(\"listWebhookNotifications()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listWebhookNotifications({ test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listWebhookNotifications({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", {});\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listWebhookNotifications({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"getWebhookNotification\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getWebhookNotification} */\n        it(\"should throw error if webhookToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getWebhookNotification(undefined, {}, callback)).to.throw(\"webhookToken is required\");\n        });\n\n        /** @test {Hyperwallet#getWebhookNotification} */\n        it(\"should do get call if webhookToken is provided\", () => {\n            const callback = () => null;\n            client.getWebhookNotification(\"webhook-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications/webhook-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Internal utils\n    //--------------------------------------\n\n    describe(\"addProgramToken()\", () => {\n        it(\"should do nothing if no data is provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            expect(client.addProgramToken()).to.be.undefined();\n        });\n\n        it(\"should do nothing if no programToken is set\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            client.addProgramToken({ test: \"value\" }).should.be.deep.equal({ test: \"value\" });\n        });\n\n        it(\"should do nothing if programToken is set in data\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.addProgramToken({ test: \"value\", programToken: \"my-program-token\" }).should.be.deep.equal({ test: \"value\", programToken: \"my-program-token\" });\n        });\n\n        it(\"should add programToken if no programToken is set in data\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.addProgramToken({ test: \"value\" }).should.be.deep.equal({ test: \"value\", programToken: \"test-program-token\" });\n        });\n    });\n\n    describe(\"handle204Response()\", () => {\n        it(\"should return a 'function' with a argument\", () => {\n            Hyperwallet.handle204Response(() => null).should.be.a(\"function\");\n        });\n\n        it(\"should do nothing for errors\", (cb) => {\n            const providedErr = new Error(\"Test\");\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 200,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                err.should.be.deep.equal(providedErr);\n                data.should.be.deep.equal(providedData);\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(providedErr, providedData, providedRes);\n        });\n\n        it(\"should do nothing for non 204 responses\", (cb) => {\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 200,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                expect(err).to.be.undefined();\n\n                data.should.be.deep.equal(providedData);\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(undefined, providedData, providedRes);\n        });\n\n        it(\"should return empty list for 204 responses\", (cb) => {\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 204,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                expect(err).to.be.undefined();\n\n                data.should.be.deep.equal({\n                    count: 0,\n                    data: [],\n                });\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(undefined, providedData, providedRes);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/test/Hyperwallet.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/Hyperwallet.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0",
    "access": null,
    "description": "Hyperwallet",
    "lineNumber": 13,
    "testTargets": [
      "Hyperwallet"
    ]
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1",
    "access": null,
    "description": "constructor()",
    "lineNumber": 15,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should initialize ApiClient with default server",
    "lineNumber": 17,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "should set programToken to undefined if not provided",
    "lineNumber": 29,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it4",
    "access": null,
    "description": "should set programToken if provided",
    "lineNumber": 39,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it5",
    "access": null,
    "description": "should initialize ApiClient with provided server",
    "lineNumber": 50,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it6",
    "access": null,
    "description": "should throw error if username is missing",
    "lineNumber": 61,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it7",
    "access": null,
    "description": "should throw error if password is missing",
    "lineNumber": 68,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it8",
    "access": null,
    "description": "should throw error if username and password is missing",
    "lineNumber": 75,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe9",
    "access": null,
    "description": "listUsers()",
    "lineNumber": 85
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe9.it10",
    "access": null,
    "description": "should not have any TLS issues",
    "lineNumber": 86
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11",
    "access": null,
    "description": "createUser()",
    "lineNumber": 103,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11.it12",
    "access": null,
    "description": "should do post call to users endpoint without programToken added",
    "lineNumber": 119,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11.it13",
    "access": null,
    "description": "should do post call to users endpoint with programToken added",
    "lineNumber": 132,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe14",
    "access": null,
    "description": "getUser()",
    "lineNumber": 149,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe14.it15",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 165,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe14.it16",
    "access": null,
    "description": "should do get call if userToken is provided",
    "lineNumber": 171,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe17",
    "access": null,
    "description": "updateUser()",
    "lineNumber": 181,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe17.it18",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 197,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe17.it19",
    "access": null,
    "description": "should do put call to users endpoint without programToken added",
    "lineNumber": 203,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe17.it20",
    "access": null,
    "description": "should do put call to users endpoint with programToken added",
    "lineNumber": 216,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21",
    "access": null,
    "description": "listUsers()",
    "lineNumber": 233,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it22",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 249,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it23",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 258,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it24",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 267,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25",
    "access": null,
    "description": "getUserStatusTransition()",
    "lineNumber": 288,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it26",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 304,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it27",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 310,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it28",
    "access": null,
    "description": "should do get call if userToken and statusTransitionToken is provided",
    "lineNumber": 316,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe29",
    "access": null,
    "description": "listUserStatusTransitions()",
    "lineNumber": 326,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe29.it30",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 342,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe29.it31",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 348,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe29.it32",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 357,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe29.it33",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 366,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe34",
    "access": null,
    "description": "createBankCard()",
    "lineNumber": 391,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe34.it35",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 407,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe34.it36",
    "access": null,
    "description": "should do post call to bank cards endpoint",
    "lineNumber": 413,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe37",
    "access": null,
    "description": "getBankCard()",
    "lineNumber": 427,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe37.it38",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 443,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe37.it39",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 449,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe37.it40",
    "access": null,
    "description": "should do get call if userToken and bankCardToken is provided",
    "lineNumber": 455,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe41",
    "access": null,
    "description": "updateBankCard()",
    "lineNumber": 465,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe41.it42",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 481,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe41.it43",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 487,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe41.it44",
    "access": null,
    "description": "should do put call to bank cards endpoint",
    "lineNumber": 493,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45",
    "access": null,
    "description": "listBankCards()",
    "lineNumber": 507,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it46",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 523,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it47",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 529,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it48",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 538,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it49",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 547,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe50",
    "access": null,
    "description": "deactivate()",
    "lineNumber": 568,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe50.it51",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 586,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe50.it52",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 594,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe50.it53",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 602,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe54",
    "access": null,
    "description": "createBankCardStatusTransition()",
    "lineNumber": 614,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe54.it55",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 630,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe54.it56",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 636,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe54.it57",
    "access": null,
    "description": "should send post call to bank card status transition endpoint",
    "lineNumber": 642,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58",
    "access": null,
    "description": "getBankCardStatusTransition()",
    "lineNumber": 654,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it59",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 670,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it60",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 676,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it61",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 682,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it62",
    "access": null,
    "description": "should do get call if userToken, bankCardToken and statusTransitionToken is provided",
    "lineNumber": 688,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63",
    "access": null,
    "description": "listBankCardStatusTransitions()",
    "lineNumber": 698,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63.it64",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 714,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63.it65",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 720,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63.it66",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 726,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63.it67",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 735,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe63.it68",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 744,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69",
    "access": null,
    "description": "getAuthenticationToken()",
    "lineNumber": 769,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69.it70",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 785,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69.it71",
    "access": null,
    "description": "should do post call to authentication token endpoint",
    "lineNumber": 791,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe72",
    "access": null,
    "description": "createPaperCheck()",
    "lineNumber": 805,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe72",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe72.it73",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 821,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe72",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe72.it74",
    "access": null,
    "description": "should do post call to paper checks endpoint",
    "lineNumber": 827,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe75",
    "access": null,
    "description": "getPaperCheck()",
    "lineNumber": 841,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe75.it76",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 857,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe75.it77",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 863,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe75.it78",
    "access": null,
    "description": "should do get call if userToken and paperCheckToken is provided",
    "lineNumber": 869,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79",
    "access": null,
    "description": "updatePaperCheck()",
    "lineNumber": 879,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it80",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 895,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it81",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 901,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it82",
    "access": null,
    "description": "should do put call to paper checks endpoint",
    "lineNumber": 907,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83",
    "access": null,
    "description": "listPaperChecks()",
    "lineNumber": 921,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it84",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 937,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it85",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 943,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it86",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 952,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it87",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 961,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe88",
    "access": null,
    "description": "deactivate()",
    "lineNumber": 982,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe88.it89",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1000,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe88.it90",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1008,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe88.it91",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 1016,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92",
    "access": null,
    "description": "createPaperCheckStatusTransition()",
    "lineNumber": 1028,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it93",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1044,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it94",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1050,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it95",
    "access": null,
    "description": "should send post call to paper check status transition endpoint",
    "lineNumber": 1056,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe96",
    "access": null,
    "description": "getPaperCheckStatusTransition()",
    "lineNumber": 1068,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe96.it97",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1084,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe96.it98",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1090,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe96.it99",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 1096,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe96.it100",
    "access": null,
    "description": "should do get call if userToken, paperCheckToken and statusTransitionToken is provided",
    "lineNumber": 1102,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101",
    "access": null,
    "description": "listPaperCheckStatusTransitions()",
    "lineNumber": 1112,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101.it102",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1128,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101.it103",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1134,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101.it104",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1140,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101.it105",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1149,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe101.it106",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1158,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe107",
    "access": null,
    "description": "createTransfer()",
    "lineNumber": 1183,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe107.it108",
    "access": null,
    "description": "should throw error if sourceToken is missing",
    "lineNumber": 1199,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe107.it109",
    "access": null,
    "description": "should throw error if destinationToken is missing",
    "lineNumber": 1207,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe107.it110",
    "access": null,
    "description": "should throw error if clientTransferId is missing",
    "lineNumber": 1215,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe107.it111",
    "access": null,
    "description": "should do post call to transfers endpoint",
    "lineNumber": 1224,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe112",
    "access": null,
    "description": "getTransfer()",
    "lineNumber": 1242,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe112.it113",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1258,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe112.it114",
    "access": null,
    "description": "should do get call if transferToken is provided",
    "lineNumber": 1264,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe115",
    "access": null,
    "description": "listTransfers()",
    "lineNumber": 1274,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe115.it116",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1290,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe115.it117",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1299,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe115.it118",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1308,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119",
    "access": null,
    "description": "createTransferStatusTransition()",
    "lineNumber": 1329,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119.it120",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1345,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119.it121",
    "access": null,
    "description": "should send post call to transfer status transition endpoint",
    "lineNumber": 1351,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe122",
    "testId": 122,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122",
    "access": null,
    "description": "createPayPalAccount()",
    "lineNumber": 1367,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122.it123",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1383,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122.it124",
    "access": null,
    "description": "should throw error if transferMethodCountry is missing",
    "lineNumber": 1389,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122.it125",
    "access": null,
    "description": "should throw error if transferMethodCurrency is missing",
    "lineNumber": 1395,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122.it126",
    "access": null,
    "description": "should throw error if email is missing",
    "lineNumber": 1403,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe122.it127",
    "access": null,
    "description": "should do post call to PayPal account endpoint",
    "lineNumber": 1412,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe128",
    "access": null,
    "description": "getPayPalAccount()",
    "lineNumber": 1430,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe128.it129",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1446,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe128.it130",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 1452,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe128.it131",
    "access": null,
    "description": "should do get call if userToken and payPalAccountToken is provided",
    "lineNumber": 1458,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132",
    "access": null,
    "description": "listPayPalAccounts()",
    "lineNumber": 1468,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it133",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1484,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it134",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1490,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it135",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1499,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it136",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1508,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe137",
    "access": null,
    "description": "createPayPalAccountStatusTransition()",
    "lineNumber": 1529,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe137.it138",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1545,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe137.it139",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 1551,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe137.it140",
    "access": null,
    "description": "should send post call to paypal account status transition endpoint",
    "lineNumber": 1557,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe141",
    "access": null,
    "description": "createPrepaidCard()",
    "lineNumber": 1573,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe141.it142",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1589,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe141.it143",
    "access": null,
    "description": "should do post call to prepaid cards endpoint",
    "lineNumber": 1595,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144",
    "access": null,
    "description": "getPrepaidCard()",
    "lineNumber": 1609,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144.it145",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1625,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144.it146",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1631,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144.it147",
    "access": null,
    "description": "should do get call if userToken and prepaidCardToken is provided",
    "lineNumber": 1637,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe148",
    "access": null,
    "description": "updatePrepaidCard()",
    "lineNumber": 1647,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe148.it149",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1663,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe148.it150",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1669,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe148.it151",
    "access": null,
    "description": "should do put call to prepaid cards endpoint",
    "lineNumber": 1675,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152",
    "access": null,
    "description": "listPrepaidCards()",
    "lineNumber": 1689,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it153",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1705,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it154",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1711,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it155",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1720,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it156",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1729,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe157",
    "testId": 157,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe157",
    "access": null,
    "lineNumber": 1760
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe157.it158",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1783,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe157.it159",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1796,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe157.it160",
    "access": null,
    "lineNumber": 1809,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe161",
    "access": null,
    "description": "createPrepaidCardStatusTransition()",
    "lineNumber": 1822,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe161.it162",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1838,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe161.it163",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1844,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe161.it164",
    "access": null,
    "description": "should send post call to prepaid card status transition endpoint",
    "lineNumber": 1850,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe165",
    "access": null,
    "description": "getPrepaidCardStatusTransition()",
    "lineNumber": 1862,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe165.it166",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1878,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe165.it167",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1884,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe165.it168",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 1890,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe165.it169",
    "access": null,
    "description": "should do get call if userToken, prepaidCardToken and statusTransitionToken is provided",
    "lineNumber": 1896,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170",
    "access": null,
    "description": "listPrepaidCardStatusTransitions()",
    "lineNumber": 1906,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170.it171",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1922,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170.it172",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 1928,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170.it173",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1934,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170.it174",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1943,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe170.it175",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1952,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe176",
    "testId": 176,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe176",
    "access": null,
    "description": "createBankAccount()",
    "lineNumber": 1977,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe176",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe176.it177",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1993,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe176",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe176.it178",
    "access": null,
    "description": "should do post call to bank accounts endpoint",
    "lineNumber": 1999,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe179",
    "access": null,
    "description": "getBankAccount()",
    "lineNumber": 2013,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe179.it180",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2029,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe179.it181",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2035,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe179.it182",
    "access": null,
    "description": "should do get call if userToken and bankAccountToken is provided",
    "lineNumber": 2041,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe183",
    "access": null,
    "description": "updateBankAccount()",
    "lineNumber": 2051,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe183.it184",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2067,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe183.it185",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2073,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe183.it186",
    "access": null,
    "description": "should do put call to bank accounts endpoint",
    "lineNumber": 2079,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe187",
    "access": null,
    "description": "listBankAccounts()",
    "lineNumber": 2093,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe187.it188",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2109,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe187.it189",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2115,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe187.it190",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2124,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe187.it191",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2133,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192",
    "access": null,
    "description": "deactivateBankAccount()",
    "lineNumber": 2154,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it193",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2170,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it194",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2176,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it195",
    "access": null,
    "description": "should send transition to 'DE-ACTIVATED'",
    "lineNumber": 2182,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196",
    "access": null,
    "description": "createBankAccountStatusTransition()",
    "lineNumber": 2194,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it197",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2210,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it198",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2216,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it199",
    "access": null,
    "description": "should send post call to prepaid card status transition endpoint",
    "lineNumber": 2222,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200",
    "access": null,
    "description": "getBankAccountStatusTransition()",
    "lineNumber": 2234,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it201",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2250,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it202",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2256,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it203",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 2262,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it204",
    "access": null,
    "description": "should do get call if userToken, bankAccountToken and statusTransitionToken is provided",
    "lineNumber": 2268,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "describe205",
    "testId": 205,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205",
    "access": null,
    "description": "listBankAccountStatusTransitions()",
    "lineNumber": 2278,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it206",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2294,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it207",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2300,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it208",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2306,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it209",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2315,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it210",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2324,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "describe211",
    "testId": 211,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe211",
    "access": null,
    "description": "listBalancesForUser()",
    "lineNumber": 2349,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe211",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe211.it212",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2365,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe211",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe211.it213",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2371,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe211",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe211.it214",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2380,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe211",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe211.it215",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2389,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe216",
    "testId": 216,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216",
    "access": null,
    "description": "listBalancesForPrepaidCard()",
    "lineNumber": 2410,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216.it217",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2426,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216.it218",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2432,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216.it219",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2438,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216.it220",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2447,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe216.it221",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2456,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "describe222",
    "testId": 222,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222",
    "access": null,
    "description": "listBalancesForAccount()",
    "lineNumber": 2477,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe222",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222.it223",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 2493,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe222",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222.it224",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 2499,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe222",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222.it225",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2505,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe222",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222.it226",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2514,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe222",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe222.it227",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2523,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe228",
    "testId": 228,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe228",
    "access": null,
    "description": "createPayment()",
    "lineNumber": 2548,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe228.it229",
    "access": null,
    "description": "should do post call to payments endpoint without programToken added",
    "lineNumber": 2564,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe228",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe228.it230",
    "access": null,
    "description": "should do post call to payments endpoint with programToken added",
    "lineNumber": 2577,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe231",
    "testId": 231,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe231",
    "access": null,
    "description": "getPayment()",
    "lineNumber": 2594,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe231",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe231.it232",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 2610,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe231",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe231.it233",
    "access": null,
    "description": "should do get call if paymentToken is provided",
    "lineNumber": 2616,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "describe234",
    "testId": 234,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe234",
    "access": null,
    "description": "listPayments()",
    "lineNumber": 2626,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe234.it235",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2642,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe234.it236",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2651,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe234",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe234.it237",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2660,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "describe238",
    "testId": 238,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe238",
    "access": null,
    "description": "createPaymentStatusTransition()",
    "lineNumber": 2681,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe238",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe238.it239",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 2697,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe238",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe238.it240",
    "access": null,
    "description": "should send post call to payment status transition endpoint",
    "lineNumber": 2703,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "describe241",
    "testId": 241,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe241",
    "access": null,
    "description": "getPaymentStatusTransition()",
    "lineNumber": 2715,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe241.it242",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 2731,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe241.it243",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 2737,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe241.it244",
    "access": null,
    "description": "should do get call if paymentToken and statusTransitionToken is provided",
    "lineNumber": 2743,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "describe245",
    "testId": 245,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe245",
    "access": null,
    "description": "listPaymentStatusTransitions()",
    "lineNumber": 2753,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe245.it246",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 2769,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe245.it247",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2775,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe245.it248",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2784,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe245",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe245.it249",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2793,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe250",
    "testId": 250,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe250",
    "access": null,
    "description": "getProgram()",
    "lineNumber": 2818,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe250.it251",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 2834,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe250.it252",
    "access": null,
    "description": "should do get call if programToken is provided",
    "lineNumber": 2840,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "describe253",
    "testId": 253,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe253",
    "access": null,
    "description": "getProgramAccount()",
    "lineNumber": 2854,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe253",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe253.it254",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 2870,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe253",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe253.it255",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 2876,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe253",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe253.it256",
    "access": null,
    "description": "should do get call if programToken is provided",
    "lineNumber": 2882,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "describe257",
    "testId": 257,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257",
    "access": null,
    "description": "getTransferMethodConfiguration()",
    "lineNumber": 2896,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it258",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2912,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it259",
    "access": null,
    "description": "should throw error if country is missing",
    "lineNumber": 2918,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it260",
    "access": null,
    "description": "should throw error if currency is missing",
    "lineNumber": 2924,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it261",
    "access": null,
    "description": "should throw error if type is missing",
    "lineNumber": 2930,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it262",
    "access": null,
    "description": "should throw error if profileType is missing",
    "lineNumber": 2936,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe257",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe257.it263",
    "access": null,
    "description": "should do get call if userToken, country, currency, type and profileType is provided",
    "lineNumber": 2942,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "describe264",
    "testId": 264,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe264",
    "access": null,
    "description": "listTransferMethodConfigurations()",
    "lineNumber": 2958,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe264.it265",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2974,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe264.it266",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2980,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe264.it267",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2992,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe264.it268",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3003,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "describe269",
    "testId": 269,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe269",
    "access": null,
    "description": "createTransferMethod()",
    "lineNumber": 3025
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe269.it270",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3041,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe269.it271",
    "access": null,
    "description": "should throw error if cacheToken is missing",
    "lineNumber": 3050,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe269",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe269.it272",
    "access": null,
    "description": "should do post call with userToken and cacheToken",
    "lineNumber": 3059,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe273",
    "testId": 273,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273",
    "access": null,
    "description": "listReceiptsForProgramAccount()",
    "lineNumber": 3075,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273.it274",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 3091,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273.it275",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 3097,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273.it276",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3103,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273.it277",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3112,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it278",
    "testId": 278,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe273",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe273.it278",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3121,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "describe279",
    "testId": 279,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279",
    "access": null,
    "description": "listReceiptsForUser()",
    "lineNumber": 3142,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it280",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3158,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it281",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3164,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it282",
    "testId": 282,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it282",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3173,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it283",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3182,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "describe284",
    "testId": 284,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284",
    "access": null,
    "description": "listReceiptsForPrepaidCard()",
    "lineNumber": 3203,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe284",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284.it285",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3219,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it286",
    "testId": 286,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe284",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284.it286",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 3225,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe284",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284.it287",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3231,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe284",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284.it288",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3240,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe284",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe284.it289",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3249,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "describe290",
    "testId": 290,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe290",
    "access": null,
    "description": "listWebhookNotifications()",
    "lineNumber": 3273
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe290",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe290.it291",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3289,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it292",
    "testId": 292,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe290",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe290.it292",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3298,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe290",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe290.it293",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3307,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "describe294",
    "testId": 294,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe294",
    "access": null,
    "description": "getWebhookNotification",
    "lineNumber": 3327
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe294",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe294.it295",
    "access": null,
    "description": "should throw error if webhookToken is missing",
    "lineNumber": 3343,
    "testTargets": [
      "Hyperwallet#getWebhookNotification"
    ]
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe294",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe294.it296",
    "access": null,
    "description": "should do get call if webhookToken is provided",
    "lineNumber": 3349,
    "testTargets": [
      "Hyperwallet#getWebhookNotification"
    ]
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "describe297",
    "testId": 297,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe297",
    "access": null,
    "description": "addProgramToken()",
    "lineNumber": 3362
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it298",
    "testId": 298,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe297",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe297.it298",
    "access": null,
    "description": "should do nothing if no data is provided",
    "lineNumber": 3363
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it299",
    "testId": 299,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe297",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe297.it299",
    "access": null,
    "description": "should do nothing if no programToken is set",
    "lineNumber": 3372
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe297",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe297.it300",
    "access": null,
    "description": "should do nothing if programToken is set in data",
    "lineNumber": 3381
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe297",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe297.it301",
    "access": null,
    "description": "should add programToken if no programToken is set in data",
    "lineNumber": 3391
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "describe302",
    "testId": 302,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe302",
    "access": null,
    "description": "handle204Response()",
    "lineNumber": 3402
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe302.it303",
    "access": null,
    "description": "should return a 'function' with a argument",
    "lineNumber": 3403
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe302.it304",
    "access": null,
    "description": "should do nothing for errors",
    "lineNumber": 3407
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it305",
    "testId": 305,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe302.it305",
    "access": null,
    "description": "should do nothing for non 204 responses",
    "lineNumber": 3426
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe302.it306",
    "access": null,
    "description": "should return empty list for 204 responses",
    "lineNumber": 3445
  },
  {
    "__docId__": 482,
    "kind": "testFile",
    "name": "test/utils/ApiClient.spec.js",
    "content": "import chai, { expect } from \"chai\";\nimport dirtyChai from \"dirty-chai\";\nimport nock from \"nock\";\nimport path from \"path\";\nimport Encryption from \"../../src/utils/Encryption\";\n\nimport ApiClient from \"../../src/utils/ApiClient\";\n\nimport packageJson from \"../../package.json\";\n\nchai.should();\nchai.use(dirtyChai);\n\n/** @test {ApiClient} */\ndescribe(\"utils/ApiClient\", () => {\n    /** @test {ApiClient#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {ApiClient#constructor} */\n        it(\"should set provided values as private members\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.username.should.be.equal(\"test-username\");\n            client.password.should.be.equal(\"test-password\");\n            client.server.should.be.equal(\"test-server\");\n        });\n\n        /** @test {ApiClient#constructor} */\n        it(\"should set the version to package.json version\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n            client.version.should.be.equal(packageJson.version);\n        });\n    });\n\n    /** @test {ApiClient#doPost} */\n    describe(\"doPost()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .reply(201, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return encrypted response if encrypted POST call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return encrypted response if encrypted POST call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error when encrypted response body is empty\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then(() => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, null, {\n                        \"Content-Type\": \"application/jose+json\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n\n                    err.should.be.deep.equal(\"Try to decrypt empty response body\");\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error when fail to encrypt POST request body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: \"wrongPath\",\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(201, encryptedBody);\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n\n                    err.should.be.deep.equal(\"Failed to encrypt body for POST request\");\n\n                    cb();\n                });\n            });\n        });\n    });\n\n    /** @test {ApiClient#doPut} */\n    describe(\"doPut()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v3/test\", {\n                    test: \"value\",\n                })\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return encrypted response if encrypted PUT call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return encrypted response if encrypted PUT call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when fail to encrypt PUT request body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: \"wrongPath\",\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody);\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n\n                    err.should.be.deep.equal(\"Failed to encrypt body for PUT request\");\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when fail to decrypt PUT response body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1-wrong-jwe\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    err.should.be.deep.equal(\"Failed to decrypt response for PUT request\");\n\n                    expect(body).to.not.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when server responses with error on encrypted PUT request\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const errorMessage = {\n                errors: [\n                    \"test1\",\n                    \"test2\",\n                ],\n            };\n\n            encryption.encrypt(errorMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(404, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    err.should.be.deep.equal([\n                        \"test1\",\n                        \"test2\",\n                    ]);\n\n                    body.should.be.deep.equal({\n                        errors: [\n                            \"test1\",\n                            \"test2\",\n                        ],\n                    });\n\n                    res.should.be.deep.equal({\n                        body: {\n                            errors: [\n                                \"test1\",\n                                \"test2\",\n                            ],\n                        },\n                    });\n\n                    cb();\n                });\n            });\n        });\n    });\n\n    /** @test {ApiClient#doGet} */\n    describe(\"doGet()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v3/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v3/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v3/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v3/test\")\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v3/test\")\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return encrypted response if encrypted GET call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .get(\"/\")\n                    .reply(200, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return encrypted response if encrypted GET call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .get(\"/\")\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n    });\n\n    describe(\"wrapCallback()\", () => {\n        it(\"should return a 'function' without a argument\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.wrapCallback().should.be.a(\"function\");\n        });\n\n        it(\"should return a 'function' with a argument\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.wrapCallback(() => null).should.be.a(\"function\");\n        });\n\n        it(\"should be able to run without any arguments\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n            client.wrapCallback()(new Error());\n        });\n\n        it(\"should call callback with 'body' and 'res' if no error happened\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 200,\n                type: \"application/json\",\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(undefined, rawRes);\n        });\n\n        it(\"should call callback with 'errors', 'body' and 'res' if 'body' contains errors\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                },\n                status: 404,\n                type: \"application/json\",\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(new Error(), rawRes);\n        });\n\n        it(\"should call callback with static error message as 'errors', 'body' and 'res' if 'body' contains no errors\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 404,\n                type: \"application/json\",\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(new Error(), rawRes);\n        });\n\n        it(\"should call callback with 'body' and 'res' and application/jose+json Content-Type\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                const callback = clientWithEncryption.wrapCallback(\"POST\", (err, body, res) => {\n                    expect(err).to.be.undefined();\n                    expect(res).not.to.be.undefined();\n                    body.should.be.deep.equal(testMessage);\n\n                    cb();\n                });\n                const rawRes = {\n                    body: encryptedBody,\n                    status: 200,\n                    type: \"application/jose+json\",\n                };\n                callback(undefined, rawRes);\n            });\n        });\n\n        it(\"should call callback with static error message as 'errors', when Content-Type is wrong\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 200,\n                header: {\n                    \"content-type\": \"wrongContentType\",\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Invalid Content-Type specified in Response Header\",\n                }]);\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(new Error(), rawRes);\n        });\n\n        it(\"should call callback with no errors if Content-type is missing and response is noContent\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 204,\n                header: {\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(undefined, rawRes);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/test/utils/ApiClient.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "describe307",
    "testId": 307,
    "memberof": "test/utils/ApiClient.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307",
    "access": null,
    "description": "utils/ApiClient",
    "lineNumber": 15,
    "testTargets": [
      "ApiClient"
    ]
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "describe308",
    "testId": 308,
    "memberof": "test/utils/ApiClient.spec.js~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe308",
    "access": null,
    "description": "constructor()",
    "lineNumber": 17,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it309",
    "testId": 309,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe308.it309",
    "access": null,
    "description": "should set provided values as private members",
    "lineNumber": 19,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it310",
    "testId": 310,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe308.it310",
    "access": null,
    "description": "should set the version to package.json version",
    "lineNumber": 28,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "describe311",
    "testId": 311,
    "memberof": "test/utils/ApiClient.spec.js~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311",
    "access": null,
    "description": "doPost()",
    "lineNumber": 35,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it312",
    "testId": 312,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it312",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 56,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it313",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 82,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it314",
    "testId": 314,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it314",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 110,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it315",
    "testId": 315,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it315",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 138,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it316",
    "testId": 316,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it316",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 163,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it317",
    "testId": 317,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it317",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 178,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it318",
    "access": null,
    "description": "should return encrypted response if encrypted POST call was successful (without query parameters)",
    "lineNumber": 220,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it319",
    "testId": 319,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it319",
    "access": null,
    "description": "should return encrypted response if encrypted POST call was successful when content type contains charset",
    "lineNumber": 259,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it320",
    "testId": 320,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it320",
    "access": null,
    "description": "should return error when encrypted response body is empty",
    "lineNumber": 298,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it321",
    "testId": 321,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe311.it321",
    "access": null,
    "description": "should return error when fail to encrypt POST request body",
    "lineNumber": 335,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "describe322",
    "testId": 322,
    "memberof": "test/utils/ApiClient.spec.js~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322",
    "access": null,
    "description": "doPut()",
    "lineNumber": 371,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it323",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 392,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it324",
    "testId": 324,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it324",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 418,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it325",
    "testId": 325,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it325",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 446,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it326",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 474,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it327",
    "testId": 327,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it327",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 499,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it328",
    "testId": 328,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it328",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 514,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it329",
    "testId": 329,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it329",
    "access": null,
    "description": "should return encrypted response if encrypted PUT call was successful (without query parameters)",
    "lineNumber": 556,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it330",
    "testId": 330,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it330",
    "access": null,
    "description": "should return encrypted response if encrypted PUT call was successful when content type contains charset",
    "lineNumber": 593,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it331",
    "testId": 331,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it331",
    "access": null,
    "description": "should return error when fail to encrypt PUT request body",
    "lineNumber": 632,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it332",
    "access": null,
    "description": "should return error when fail to decrypt PUT response body",
    "lineNumber": 667,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it333",
    "testId": 333,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe322",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe322.it333",
    "access": null,
    "description": "should return error when server responses with error on encrypted PUT request",
    "lineNumber": 702,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "describe334",
    "testId": 334,
    "memberof": "test/utils/ApiClient.spec.js~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334",
    "access": null,
    "description": "doGet()",
    "lineNumber": 756,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it335",
    "testId": 335,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it335",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 777,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it336",
    "testId": 336,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it336",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 800,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it337",
    "testId": 337,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it337",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 825,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it338",
    "testId": 338,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it338",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 850,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it339",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 872,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it340",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 887,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it341",
    "testId": 341,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it341",
    "access": null,
    "description": "should return encrypted response if encrypted GET call was successful (without query parameters)",
    "lineNumber": 926,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it342",
    "testId": 342,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe334.it342",
    "access": null,
    "description": "should return encrypted response if encrypted GET call was successful when content type contains charset",
    "lineNumber": 962,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "describe343",
    "testId": 343,
    "memberof": "test/utils/ApiClient.spec.js~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343",
    "access": null,
    "description": "wrapCallback()",
    "lineNumber": 1000
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it344",
    "testId": 344,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it344",
    "access": null,
    "description": "should return a 'function' without a argument",
    "lineNumber": 1001
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it345",
    "testId": 345,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it345",
    "access": null,
    "description": "should return a 'function' with a argument",
    "lineNumber": 1007
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it346",
    "testId": 346,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it346",
    "access": null,
    "description": "should be able to run without any arguments",
    "lineNumber": 1013
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it347",
    "testId": 347,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it347",
    "access": null,
    "description": "should call callback with 'body' and 'res' if no error happened",
    "lineNumber": 1018
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it348",
    "testId": 348,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it348",
    "access": null,
    "description": "should call callback with 'errors', 'body' and 'res' if 'body' contains errors",
    "lineNumber": 1038
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it349",
    "testId": 349,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it349",
    "access": null,
    "description": "should call callback with static error message as 'errors', 'body' and 'res' if 'body' contains no errors",
    "lineNumber": 1076
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it350",
    "testId": 350,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it350",
    "access": null,
    "description": "should call callback with 'body' and 'res' and application/jose+json Content-Type",
    "lineNumber": 1098
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "it351",
    "testId": 351,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it351",
    "access": null,
    "description": "should call callback with static error message as 'errors', when Content-Type is wrong",
    "lineNumber": 1128
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "it352",
    "testId": 352,
    "memberof": "test/utils/ApiClient.spec.js~describe307.describe343",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe307.describe343.it352",
    "access": null,
    "description": "should call callback with no errors if Content-type is missing and response is noContent",
    "lineNumber": 1151
  },
  {
    "__docId__": 529,
    "kind": "testFile",
    "name": "test/utils/Encryption.spec.js",
    "content": "import path from \"path\";\nimport nock from \"nock\";\nimport fs from \"fs\";\nimport Encryption from \"../../src/utils/Encryption\";\n\n/** @test {Encryption} */\ndescribe(\"utils/Encryption\", () => {\n    /** @test {Encryption#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {Encryption#constructor} */\n        it(\"should set default values for encryption properties\", () => {\n            const encryption = new Encryption(\"clientPrivateKeySetLocation\", \"hyperwalletKeySetLocation\");\n\n            encryption.clientPrivateKeySetLocation.should.be.equal(\"clientPrivateKeySetLocation\");\n            encryption.hyperwalletKeySetLocation.should.be.equal(\"hyperwalletKeySetLocation\");\n            encryption.encryptionAlgorithm.should.be.equal(\"RSA-OAEP-256\");\n            encryption.signAlgorithm.should.be.equal(\"RS256\");\n            encryption.encryptionMethod.should.be.equal(\"A256CBC-HS512\");\n            encryption.jwsExpirationMinutes.should.be.equal(5);\n        });\n\n        /** @test {Encryption#constructor} */\n        it(\"should set encryption properties by constructor\", () => {\n            const encryption = new Encryption(\"clientPrivateKeySetLocation\", \"hyperwalletKeySetLocation\",\n                \"encryptionAlgorithm\", \"signAlgorithm\", \"encryptionMethod\", 12);\n\n            encryption.clientPrivateKeySetLocation.should.be.equal(\"clientPrivateKeySetLocation\");\n            encryption.hyperwalletKeySetLocation.should.be.equal(\"hyperwalletKeySetLocation\");\n            encryption.encryptionAlgorithm.should.be.equal(\"encryptionAlgorithm\");\n            encryption.signAlgorithm.should.be.equal(\"signAlgorithm\");\n            encryption.encryptionMethod.should.be.equal(\"encryptionMethod\");\n            encryption.jwsExpirationMinutes.should.be.equal(12);\n        });\n    });\n\n    /** @test {Encryption#encrypt} */\n    describe(\"encrypt()\", () => {\n        let encryption;\n        let testMessage;\n        let clientPath;\n        let hwPath;\n\n        beforeEach(() => {\n            clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            encryption = new Encryption(clientPath, hwPath);\n            testMessage = {\n                message: \"Test message\",\n            };\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully encrypt and decrypt text message\", (cb) => {\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption.decrypt(encryptedBody).then((decryptedBody) => {\n                    decryptedBody.payload.toString(\"utf8\").should.be.deep.equal(JSON.stringify(testMessage));\n                    cb();\n                });\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully decode and encode encrypted text message\", (cb) => {\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                const decodedMessage = encryption.base64Decode(encryptedBody);\n                const encodedMessage = encryption.base64Encode(decodedMessage);\n                encodedMessage.should.be.deep.equal(encryptedBody);\n                cb();\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when wrong jwk key set location is given\", (cb) => {\n            encryption = new Encryption(\"wrong_keyset_path\", hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Wrong JWK set location path = wrong_keyset_path\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when wrong jwk key is set for encryption\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RS256\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to encrypt payload with key id = 2018_sig_rsa_RS256_2048\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when signing body with key algorithm that doesn't present in jwkset\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RS256-not-present\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RS256-not-present\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when signing body with wrong jwk key\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RSA-OAEP-256\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to sign with key id = 2018_enc_rsa_RSA-OAEP-256\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when jwk keyset file is invalid\", (cb) => {\n            encryption = new Encryption(path.join(__dirname, \"..\", \"resources\", \"jwkset-invalid\"), hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to create keyStore from given jwkSet\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when jwk keyset file location is wrong\", (cb) => {\n            encryption = new Encryption(path.join(__dirname, \"..\", \"resources\"), hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Error: EISDIR: illegal operation on a directory, read\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully encrypt and decrypt text message with url keyset path\", (cb) => {\n            fs.readFile(clientPath, { encoding: \"utf-8\" }, (err, keySetData) => {\n                nock(\"https://test-server\")\n                    .get(\"/test\")\n                    .reply(200, keySetData)\n                    .get(\"/test\")\n                    .reply(200, keySetData);\n                encryption = new Encryption(\"https://test-server/test\", hwPath);\n                const encryption2 = new Encryption(clientPath, hwPath);\n                encryption.encrypt(testMessage).then((encryptedBody) => {\n                    encryption2.decrypt(encryptedBody).then((decryptedBody) => {\n                        decryptedBody.payload.toString(\"utf8\").should.be.deep.equal(JSON.stringify(testMessage));\n                        cb();\n                    });\n                });\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when not supported encryption algorithm is given\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"unsupported_encryption_algorithm\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = unsupported_encryption_algorithm\");\n                    cb();\n                });\n        });\n    });\n\n    /** @test {Encryption#decrypt} */\n    describe(\"decrypt()\", () => {\n        let encryption;\n        let testMessage;\n        let clientPath;\n        let clientPath2;\n        let hwPath;\n        let hwPath2;\n\n        beforeEach(() => {\n            clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            clientPath2 = path.join(__dirname, \"..\", \"resources\", \"private-jwkset2\");\n            hwPath2 = path.join(__dirname, \"..\", \"resources\", \"public-jwkset2\");\n            encryption = new Encryption(clientPath, hwPath);\n            testMessage = {\n                message: \"Test message\",\n            };\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when wrong private key is used\", (cb) => {\n            const encryption2 = new Encryption(clientPath2, hwPath2);\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"Failed to decrypt payload with key id = 2018_enc_rsa_RSA-OAEP-256\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when sign algorithm is not found in keyset\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RS256-OAEP-256\");\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RS256-OAEP-256\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when algorithm is not found in jwkset\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath, \"RSA-OAEP-256-absent\");\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RSA-OAEP-256-absent\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail signature verification when wrong public key is used\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath2);\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"Failed to verify signature with key id = 2018_sig_rsa_RS256_2048\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should throw exception when jws signature has expired\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath2, \"RSA-OAEP-256\", \"RS256\", \"A256CBC-HS512\", -5);\n            encryption2.encrypt(testMessage).then(() => {\n                encryption2.signBody(testMessage).then((signedBody) => {\n                    encryption2.checkSignature(signedBody)\n                        .catch((error) => {\n                            error.message.should.be.equal(\"JWS signature has expired\");\n                            cb();\n                        });\n                });\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/hyperwallet/node-sdk/test/utils/Encryption.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "describe353",
    "testId": 353,
    "memberof": "test/utils/Encryption.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353",
    "access": null,
    "description": "utils/Encryption",
    "lineNumber": 7,
    "testTargets": [
      "Encryption"
    ]
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "describe354",
    "testId": 354,
    "memberof": "test/utils/Encryption.spec.js~describe353",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe354",
    "access": null,
    "description": "constructor()",
    "lineNumber": 9,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it355",
    "testId": 355,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe354.it355",
    "access": null,
    "description": "should set default values for encryption properties",
    "lineNumber": 11,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it356",
    "testId": 356,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe354.it356",
    "access": null,
    "description": "should set encryption properties by constructor",
    "lineNumber": 23,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "describe357",
    "testId": 357,
    "memberof": "test/utils/Encryption.spec.js~describe353",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357",
    "access": null,
    "description": "encrypt()",
    "lineNumber": 37,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "it358",
    "testId": 358,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it358",
    "access": null,
    "description": "should successfully encrypt and decrypt text message",
    "lineNumber": 53,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it359",
    "testId": 359,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it359",
    "access": null,
    "description": "should successfully decode and encode encrypted text message",
    "lineNumber": 63,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it360",
    "testId": 360,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it360",
    "access": null,
    "description": "should throw exception when wrong jwk key set location is given",
    "lineNumber": 73,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it361",
    "testId": 361,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it361",
    "access": null,
    "description": "should throw exception when wrong jwk key is set for encryption",
    "lineNumber": 83,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it362",
    "testId": 362,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it362",
    "access": null,
    "description": "should throw exception when signing body with key algorithm that doesn't present in jwkset",
    "lineNumber": 93,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it363",
    "testId": 363,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it363",
    "access": null,
    "description": "should throw exception when signing body with wrong jwk key",
    "lineNumber": 103,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "it364",
    "testId": 364,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it364",
    "access": null,
    "description": "should throw exception when jwk keyset file is invalid",
    "lineNumber": 113,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "it365",
    "testId": 365,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it365",
    "access": null,
    "description": "should throw exception when jwk keyset file location is wrong",
    "lineNumber": 123,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it366",
    "testId": 366,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it366",
    "access": null,
    "description": "should successfully encrypt and decrypt text message with url keyset path",
    "lineNumber": 133,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 544,
    "kind": "test",
    "name": "it367",
    "testId": 367,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe357",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe357.it367",
    "access": null,
    "description": "should throw exception when not supported encryption algorithm is given",
    "lineNumber": 152,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "describe368",
    "testId": 368,
    "memberof": "test/utils/Encryption.spec.js~describe353",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368",
    "access": null,
    "description": "decrypt()",
    "lineNumber": 163,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it369",
    "testId": 369,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368.it369",
    "access": null,
    "description": "should fail decryption when wrong private key is used",
    "lineNumber": 183,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it370",
    "testId": 370,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368.it370",
    "access": null,
    "description": "should fail decryption when sign algorithm is not found in keyset",
    "lineNumber": 195,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it371",
    "testId": 371,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368.it371",
    "access": null,
    "description": "should fail decryption when algorithm is not found in jwkset",
    "lineNumber": 207,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it372",
    "testId": 372,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368.it372",
    "access": null,
    "description": "should fail signature verification when wrong public key is used",
    "lineNumber": 219,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "it373",
    "testId": 373,
    "memberof": "test/utils/Encryption.spec.js~describe353.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe353.describe368.it373",
    "access": null,
    "description": "should throw exception when jws signature has expired",
    "lineNumber": 231,
    "testTargets": [
      "Encryption#decrypt"
    ]
  }
]